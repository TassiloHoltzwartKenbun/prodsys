{
  "openapi": "3.0.2",
  "info": {
    "title": "prodsys API",
    "description": "\nThe prodsys API allows you to create and run production simulations and optimizations with the prodsys library as a web service. \n",
    "contact": {
      "name": "Sebastian Behrendt",
      "email": "sebastian.behrendt@kit.edu"
    },
    "license": {
      "name": "MIT License",
      "url": "https://mit-license.org/"
    },
    "version": "0.4.1"
  },
  "paths": {
    "/projects/": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Read Projects",
        "operationId": "read_projects_projects__get",
        "responses": {
          "200": {
            "description": "Sucessfully returned projects",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Projects Projects  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                },
                "example": [
                  {
                    "ID": "Example Project",
                    "adapters": {
                      "Example Adapter": {
                        "ID": "",
                        "valid_configuration": true,
                        "reconfiguration_cost": 0,
                        "seed": 24,
                        "time_model_data": [
                          {
                            "ID": "function_time_model_1",
                            "description": "normal distribution time model with 20 minutes",
                            "distribution_function": "normal",
                            "location": 14.3,
                            "scale": 5,
                            "batch_size": 100
                          },
                          {
                            "ID": "function_time_model_2",
                            "description": "constant distribution time model with 10 minutes",
                            "distribution_function": "constant",
                            "location": 15,
                            "scale": 0,
                            "batch_size": 100
                          },
                          {
                            "ID": "function_time_model_3",
                            "description": "normal distribution time model with 20 minutes",
                            "distribution_function": "normal",
                            "location": 20,
                            "scale": 5,
                            "batch_size": 100
                          },
                          {
                            "ID": "function_time_model_4",
                            "description": "exponential distribution time model with 100 minutes",
                            "distribution_function": "exponential",
                            "location": 52,
                            "scale": 0,
                            "batch_size": 100
                          },
                          {
                            "ID": "function_time_model_5",
                            "description": "exponential distribution time model with 150 minutes",
                            "distribution_function": "exponential",
                            "location": 150,
                            "scale": 0,
                            "batch_size": 100
                          },
                          {
                            "ID": "sequential_time_model_1",
                            "description": "Sequential time model",
                            "sequence": [
                              25,
                              13,
                              15,
                              16,
                              17,
                              20,
                              21
                            ]
                          },
                          {
                            "ID": "manhattan_time_model_1",
                            "description": "manhattan time model with speed 180 m/min = 3 m/s",
                            "speed": 30,
                            "reaction_time": 0.15
                          },
                          {
                            "ID": "function_time_model_7",
                            "description": "exponential distribution time model with 300 minutes",
                            "distribution_function": "exponential",
                            "location": 300,
                            "scale": 0,
                            "batch_size": 100
                          },
                          {
                            "ID": "function_time_model_8",
                            "description": "normal distribution time model with 15 minutes",
                            "distribution_function": "normal",
                            "location": 15,
                            "scale": 3,
                            "batch_size": 100
                          }
                        ],
                        "state_data": [
                          {
                            "ID": "Breakdownstate_1",
                            "description": "Breakdown state machine 1",
                            "time_model_id": "function_time_model_5",
                            "type": "BreakDownState",
                            "repair_time_model_id": "function_time_model_8"
                          },
                          {
                            "ID": "Breakdownstate_2",
                            "description": "Breakdown state machine 2",
                            "time_model_id": "function_time_model_5",
                            "type": "BreakDownState",
                            "repair_time_model_id": "function_time_model_8"
                          },
                          {
                            "ID": "Setup_State_1",
                            "description": "Setup state machine 1",
                            "time_model_id": "function_time_model_2",
                            "type": "SetupState",
                            "origin_setup": "P1",
                            "target_setup": "P2"
                          },
                          {
                            "ID": "Setup_State_2",
                            "description": "Setup state machine 2",
                            "time_model_id": "function_time_model_2",
                            "type": "SetupState",
                            "origin_setup": "P2",
                            "target_setup": "P1"
                          },
                          {
                            "ID": "Setup_State_3",
                            "description": "Setup state machine 3",
                            "time_model_id": "function_time_model_2",
                            "type": "SetupState",
                            "origin_setup": "P1",
                            "target_setup": "P3"
                          },
                          {
                            "ID": "Setup_State_4",
                            "description": "Setup state machine 3",
                            "time_model_id": "function_time_model_3",
                            "type": "SetupState",
                            "origin_setup": "P3",
                            "target_setup": "P1"
                          },
                          {
                            "ID": "ProcessBreakdownState_1",
                            "description": "Breakdown state process 1",
                            "time_model_id": "function_time_model_7",
                            "type": "ProcessBreakDownState",
                            "repair_time_model_id": "function_time_model_8",
                            "process_id": "P1"
                          }
                        ],
                        "process_data": [
                          {
                            "ID": "P1",
                            "description": "Process 1",
                            "time_model_id": "function_time_model_1",
                            "type": "ProductionProcesses"
                          },
                          {
                            "ID": "P2",
                            "description": "Process 2",
                            "time_model_id": "function_time_model_2",
                            "type": "ProductionProcesses"
                          },
                          {
                            "ID": "P3",
                            "description": "Process 3",
                            "time_model_id": "function_time_model_3",
                            "type": "ProductionProcesses"
                          },
                          {
                            "ID": "TP1",
                            "description": "Transport Process 1",
                            "time_model_id": "manhattan_time_model_1",
                            "type": "TransportProcesses"
                          }
                        ],
                        "queue_data": [
                          {
                            "ID": "IQ1",
                            "description": "Input-queue 1 for R1",
                            "capacity": 10
                          },
                          {
                            "ID": "OQ1",
                            "description": "Output-queue 1 for R1",
                            "capacity": 10
                          },
                          {
                            "ID": "OQ2",
                            "description": "Output-queue 2 for R2",
                            "capacity": 10
                          },
                          {
                            "ID": "IQ2",
                            "description": "Input-queue 2 for R3",
                            "capacity": 10
                          },
                          {
                            "ID": "OQ3",
                            "description": "Output-queue 3 for R3",
                            "capacity": 10
                          },
                          {
                            "ID": "SourceQueue",
                            "description": "Output-Queue for all sources",
                            "capacity": 0
                          },
                          {
                            "ID": "SinkQueue",
                            "description": "Input-Queue for all sinks",
                            "capacity": 0
                          },
                          {
                            "ID": "IQ9",
                            "description": "Input-queue 1 for R2",
                            "capacity": 10
                          }
                        ],
                        "resource_data": [
                          {
                            "ID": "R1",
                            "description": "Resource 1",
                            "capacity": 2,
                            "location": [
                              10,
                              10
                            ],
                            "controller": "PipelineController",
                            "control_policy": "FIFO",
                            "process_ids": [
                              "P1",
                              "P2"
                            ],
                            "process_capacities": [
                              2,
                              1
                            ],
                            "state_ids": [
                              "Breakdownstate_1",
                              "Setup_State_1",
                              "Setup_State_2",
                              "ProcessBreakdownState_1"
                            ],
                            "input_queues": [
                              "IQ1"
                            ],
                            "output_queues": [
                              "OQ1"
                            ]
                          },
                          {
                            "ID": "R2",
                            "description": "Resource 2",
                            "capacity": 1,
                            "location": [
                              20,
                              10
                            ],
                            "controller": "PipelineController",
                            "control_policy": "FIFO",
                            "process_ids": [
                              "P2",
                              "P3"
                            ],
                            "state_ids": [
                              "Breakdownstate_2"
                            ],
                            "input_queues": [
                              "IQ9"
                            ],
                            "output_queues": [
                              "OQ2"
                            ]
                          },
                          {
                            "ID": "R3",
                            "description": "Resource 3",
                            "capacity": 2,
                            "location": [
                              20,
                              20
                            ],
                            "controller": "PipelineController",
                            "control_policy": "FIFO",
                            "process_ids": [
                              "P1",
                              "P3"
                            ],
                            "process_capacities": [
                              1,
                              2
                            ],
                            "state_ids": [
                              "Breakdownstate_1",
                              "Breakdownstate_2",
                              "Setup_State_3",
                              "Setup_State_4"
                            ],
                            "input_queues": [
                              "IQ2"
                            ],
                            "output_queues": [
                              "OQ3"
                            ]
                          },
                          {
                            "ID": "R4",
                            "description": "Resource 3",
                            "capacity": 2,
                            "location": [
                              10,
                              20
                            ],
                            "controller": "PipelineController",
                            "control_policy": "FIFO",
                            "process_ids": [
                              "P1",
                              "P3"
                            ],
                            "process_capacities": [
                              2,
                              2
                            ],
                            "state_ids": [
                              "Breakdownstate_1",
                              "Setup_State_3",
                              "Setup_State_4"
                            ],
                            "input_queues": [
                              "IQ2"
                            ],
                            "output_queues": [
                              "OQ3"
                            ]
                          },
                          {
                            "ID": "TR1",
                            "description": "Transport Resource 1",
                            "capacity": 1,
                            "location": [
                              15,
                              15
                            ],
                            "controller": "TransportController",
                            "control_policy": "FIFO",
                            "process_ids": [
                              "TP1"
                            ],
                            "state_ids": [
                              "Breakdownstate_1"
                            ]
                          },
                          {
                            "ID": "TR2",
                            "description": "Transport Resource 2",
                            "capacity": 1,
                            "location": [
                              15,
                              20
                            ],
                            "controller": "TransportController",
                            "control_policy": "SPT_transport",
                            "process_ids": [
                              "TP1"
                            ],
                            "state_ids": [
                              "Breakdownstate_1"
                            ]
                          }
                        ],
                        "product_data": [
                          {
                            "ID": "Product_1",
                            "description": "Product 1",
                            "product_type": "Product_1",
                            "processes": [
                              "P1",
                              "P2",
                              "P3"
                            ],
                            "transport_process": "TP1"
                          },
                          {
                            "ID": "Product_2",
                            "description": "Product 2",
                            "product_type": "Product_2",
                            "processes": [
                              "P1",
                              "P2",
                              "P3",
                              "P1"
                            ],
                            "transport_process": "TP1"
                          },
                          {
                            "ID": "Product_3",
                            "description": "Product 3",
                            "product_type": "Product_3",
                            "processes": {
                              "P1": [
                                "P2",
                                "P3"
                              ],
                              "P2": [],
                              "P3": []
                            },
                            "transport_process": "TP1"
                          }
                        ],
                        "sink_data": [
                          {
                            "ID": "SK1",
                            "description": "Sink 1",
                            "location": [
                              50,
                              50
                            ],
                            "product_type": "Product_1",
                            "input_queues": [
                              "SinkQueue"
                            ]
                          },
                          {
                            "ID": "SK2",
                            "description": "Sink 2",
                            "location": [
                              55,
                              50
                            ],
                            "product_type": "Product_2",
                            "input_queues": [
                              "SinkQueue"
                            ]
                          },
                          {
                            "ID": "SK3",
                            "description": "Sink 3",
                            "location": [
                              45,
                              50
                            ],
                            "product_type": "Product_3",
                            "input_queues": [
                              "SinkQueue"
                            ]
                          }
                        ],
                        "source_data": [
                          {
                            "ID": "S1",
                            "description": "Source 1",
                            "location": [
                              0,
                              0
                            ],
                            "product_type": "Product_1",
                            "time_model_id": "function_time_model_4",
                            "router": "SimpleRouter",
                            "routing_heuristic": "shortest_queue",
                            "output_queues": [
                              "SourceQueue"
                            ]
                          },
                          {
                            "ID": "S2",
                            "description": "Source 2",
                            "location": [
                              30,
                              30
                            ],
                            "product_type": "Product_2",
                            "time_model_id": "function_time_model_4",
                            "router": "SimpleRouter",
                            "routing_heuristic": "shortest_queue",
                            "output_queues": [
                              "SourceQueue"
                            ]
                          },
                          {
                            "ID": "S3",
                            "description": "Source 3",
                            "location": [
                              40,
                              30
                            ],
                            "product_type": "Product_3",
                            "time_model_id": "function_time_model_4",
                            "router": "SimpleRouter",
                            "routing_heuristic": "shortest_queue",
                            "output_queues": [
                              "SourceQueue"
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No projects found."
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Read Project",
        "operationId": "read_project_projects__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Create Project",
        "operationId": "create_project_projects__project_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Project Projects  Project Id  Put",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete Project",
        "operationId": "delete_project_projects__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/load_example_project": {
      "get": {
        "tags": [
          "examples"
        ],
        "summary": "Load Example Project",
        "operationId": "load_example_project_load_example_project_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Load Example Project Load Example Project Get",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/load_optimization_example": {
      "get": {
        "tags": [
          "examples"
        ],
        "summary": "Load Optimization Example Project",
        "operationId": "load_optimization_example_project_load_optimization_example_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Load Optimization Example Project Load Optimization Example Get",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/projects/{project_id}/adapters/": {
      "get": {
        "tags": [
          "adapters"
        ],
        "summary": "Read Adapters",
        "operationId": "read_adapters_projects__project_id__adapters__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Adapters Projects  Project Id  Adapters  Get",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/JsonProductionSystemAdapter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}": {
      "get": {
        "tags": [
          "adapters"
        ],
        "summary": "Read Adapter",
        "operationId": "read_adapter_projects__project_id__adapters__adapter_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonProductionSystemAdapter"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "adapters"
        ],
        "summary": "Update Adapter",
        "operationId": "update_adapter_projects__project_id__adapters__adapter_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonProductionSystemAdapter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adapters"
        ],
        "summary": "Delete Adapter",
        "operationId": "delete_adapter_projects__project_id__adapters__adapter_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/simulate/": {
      "get": {
        "tags": [
          "simulation"
        ],
        "summary": "Run Simulation",
        "operationId": "run_simulation_projects__project_id__adapters__adapter_id__simulate__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Run Simulation Projects  Project Id  Adapters  Adapter Id  Simulate  Get",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "simulation"
        ],
        "summary": "Run Simulation",
        "operationId": "run_simulation_projects__project_id__adapters__adapter_id__simulate__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Time Range",
              "type": "integer"
            },
            "name": "time_range",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Run Simulation Projects  Project Id  Adapters  Adapter Id  Simulate  Post",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/optimize/": {
      "post": {
        "tags": [
          "optimization"
        ],
        "summary": "Run Configuration Optimization",
        "operationId": "run_configuration_optimization_projects__project_id__adapters__adapter_id__optimize__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Hyper Parameters",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/EvolutionaryAlgorithmHyperparameters"
                  },
                  {
                    "$ref": "#/components/schemas/SimulatedAnnealingHyperparameters"
                  },
                  {
                    "$ref": "#/components/schemas/TabuSearchHyperparameters"
                  },
                  {
                    "$ref": "#/components/schemas/MathOptHyperparameters"
                  }
                ]
              },
              "examples": {
                "Evolutionary algorithm": {
                  "summary": "Evolutionary Algorithm Hperparameters",
                  "value": {
                    "seed": 0,
                    "number_of_generations": 10,
                    "population_size": 10,
                    "mutation_rate": 0.1,
                    "crossover_rate": 0.1,
                    "number_of_processes": 1
                  }
                },
                "Simulated annealing": {
                  "summary": "Simulated Annealing Hyperparameters",
                  "value": {
                    "seed": 0,
                    "Tmax": 10000,
                    "Tmin": 1,
                    "steps": 4000,
                    "updates": 300
                  }
                },
                "Tabu search": {
                  "summary": "Tabu Search Hyperparameters",
                  "value": {
                    "seed": 0,
                    "tabu_size": 10,
                    "max_steps": 300,
                    "max_score": 500
                  }
                },
                "Mathematical optimization": {
                  "summary": "Mathematical Optimization Hyperparameters",
                  "value": {
                    "optimization_time_portion": 0.5,
                    "number_of_solutions": 1,
                    "adjusted_number_of_transport_resources": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Run Configuration Optimization Projects  Project Id  Adapters  Adapter Id  Optimize  Post",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/optimize/results": {
      "get": {
        "tags": [
          "optimization"
        ],
        "summary": "Get Optimization Results",
        "operationId": "get_optimization_results_projects__project_id__adapters__adapter_id__optimize_results_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Optimization Results Projects  Project Id  Adapters  Adapter Id  Optimize Results Get",
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Output"
                        },
                        {
                          "$ref": "#/components/schemas/Throughput"
                        },
                        {
                          "$ref": "#/components/schemas/Cost"
                        },
                        {
                          "$ref": "#/components/schemas/WIP"
                        },
                        {
                          "$ref": "#/components/schemas/ThroughputTime"
                        },
                        {
                          "$ref": "#/components/schemas/ProcessingTime"
                        },
                        {
                          "$ref": "#/components/schemas/ProductiveTime"
                        },
                        {
                          "$ref": "#/components/schemas/StandbyTime"
                        },
                        {
                          "$ref": "#/components/schemas/SetupTime"
                        },
                        {
                          "$ref": "#/components/schemas/UnscheduledDowntime"
                        },
                        {
                          "$ref": "#/components/schemas/DynamicWIP"
                        },
                        {
                          "$ref": "#/components/schemas/DynamicThroughputTime"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/optimize/register/{solution_id}": {
      "get": {
        "tags": [
          "optimization",
          "optimization"
        ],
        "summary": "Register Adapter With Evaluation",
        "operationId": "register_adapter_with_evaluation_projects__project_id__adapters__adapter_id__optimize_register__solution_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Solution Id",
              "type": "string"
            },
            "name": "solution_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Register Adapter With Evaluation Projects  Project Id  Adapters  Adapter Id  Optimize Register  Solution Id  Get",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/optimize/pareto_front_performances": {
      "get": {
        "tags": [
          "optimization",
          "optimization"
        ],
        "summary": "Get Optimization Pareto Front",
        "operationId": "get_optimization_pareto_front_projects__project_id__adapters__adapter_id__optimize_pareto_front_performances_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Optimization Pareto Front Projects  Project Id  Adapters  Adapter Id  Optimize Pareto Front Performances Get",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/optimize/{solution_id}": {
      "get": {
        "tags": [
          "optimization",
          "optimization"
        ],
        "summary": "Get Optimization Solution",
        "operationId": "get_optimization_solution_projects__project_id__adapters__adapter_id__optimize__solution_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Solution Id",
              "type": "string"
            },
            "name": "solution_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonProductionSystemAdapter"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/results/static_results": {
      "get": {
        "tags": [
          "results"
        ],
        "summary": "Get Static Results",
        "operationId": "get_static_results_projects__project_id__adapters__adapter_id__results_static_results_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned static results",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Static Results Projects  Project Id  Adapters  Adapter Id  Results Static Results Get",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Output"
                      },
                      {
                        "$ref": "#/components/schemas/Throughput"
                      },
                      {
                        "$ref": "#/components/schemas/Cost"
                      },
                      {
                        "$ref": "#/components/schemas/WIP"
                      },
                      {
                        "$ref": "#/components/schemas/ThroughputTime"
                      },
                      {
                        "$ref": "#/components/schemas/ProcessingTime"
                      },
                      {
                        "$ref": "#/components/schemas/ProductiveTime"
                      },
                      {
                        "$ref": "#/components/schemas/StandbyTime"
                      },
                      {
                        "$ref": "#/components/schemas/SetupTime"
                      },
                      {
                        "$ref": "#/components/schemas/UnscheduledDowntime"
                      },
                      {
                        "$ref": "#/components/schemas/DynamicWIP"
                      },
                      {
                        "$ref": "#/components/schemas/DynamicThroughputTime"
                      }
                    ]
                  }
                },
                "example": [
                  {
                    "name": "output",
                    "target": "max",
                    "weight": 1,
                    "value": 34,
                    "context": [
                      "system",
                      "product_type"
                    ],
                    "product_type": "ProductType_1"
                  },
                  {
                    "name": "throughput",
                    "target": "max",
                    "weight": 1,
                    "value": 4.32,
                    "context": [
                      "system",
                      "product_type"
                    ],
                    "product_type": "ProductType_1"
                  },
                  {
                    "name": "cost",
                    "target": "min",
                    "weight": 0.5,
                    "value": 36000,
                    "context": [
                      "system"
                    ]
                  },
                  {
                    "name": "WIP",
                    "target": "min",
                    "weight": 1,
                    "value": 121,
                    "context": [
                      "system",
                      "product_type"
                    ],
                    "product_type": "ProductType_1"
                  },
                  {
                    "name": "throughput_time",
                    "target": "min",
                    "weight": 1,
                    "value": 221.1,
                    "context": [
                      "system",
                      "product_type"
                    ],
                    "product_type": "ProductType_1"
                  },
                  {
                    "name": "processing_time",
                    "target": "min",
                    "weight": 1,
                    "value": 1.2,
                    "context": [
                      "resource",
                      "process"
                    ],
                    "resource": "Resource_1",
                    "process": "P1"
                  },
                  {
                    "name": "productive_time",
                    "target": "max",
                    "weight": 1,
                    "value": 0.65,
                    "context": [
                      "resource"
                    ],
                    "resource": "Resource_1"
                  },
                  {
                    "name": "standby_time",
                    "target": "min",
                    "weight": 1,
                    "value": 0.12,
                    "context": [
                      "resource"
                    ],
                    "resource": "Resource_1"
                  },
                  {
                    "name": "setup_time",
                    "target": "min",
                    "weight": 1,
                    "value": 0.08,
                    "context": [
                      "resource"
                    ],
                    "resource": "Resource_1"
                  },
                  {
                    "name": "unscheduled_downtime",
                    "target": "min",
                    "weight": 1,
                    "value": 0.1,
                    "context": [
                      "resource"
                    ],
                    "resource": "Resource_1"
                  },
                  {
                    "name": "dynamic_WIP",
                    "target": "min",
                    "weight": 1,
                    "value": 121,
                    "context": [
                      "system",
                      "product"
                    ],
                    "product_type": "ProductType_1",
                    "start_time": 21.2,
                    "end_time": 23.4
                  },
                  {
                    "name": "throughput_time",
                    "target": "min",
                    "weight": 1,
                    "value": 201.3,
                    "context": [
                      "system",
                      "product"
                    ],
                    "product_type": "ProductType_1",
                    "product": "Product_1_23"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No KPIs found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/results/event_results": {
      "get": {
        "tags": [
          "results"
        ],
        "summary": "Get Event Results",
        "operationId": "get_event_results_projects__project_id__adapters__adapter_id__results_event_results_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Num Events",
              "type": "integer",
              "default": 10
            },
            "name": "num_events",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Offset",
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned event results",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Event Results Projects  Project Id  Adapters  Adapter Id  Results Event Results Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                },
                "example": [
                  {
                    "time": 12,
                    "resource": "R1",
                    "state": "P1",
                    "state_type": "Production",
                    "activity": "start state",
                    "product": "Product_1_12",
                    "expected_end_time": 24.3
                  },
                  {
                    "time": 24.3,
                    "resource": "R1",
                    "state": "P1",
                    "state_type": "Production",
                    "activity": "end state",
                    "product": "Product_1_12"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No events found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/results/{kpi}": {
      "get": {
        "tags": [
          "results"
        ],
        "summary": "Get Kpi",
        "operationId": "get_kpi_projects__project_id__adapters__adapter_id__results__kpi__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/KPIEnum"
            },
            "name": "kpi",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned static results",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Kpi Projects  Project Id  Adapters  Adapter Id  Results  Kpi  Get",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Output"
                      },
                      {
                        "$ref": "#/components/schemas/Throughput"
                      },
                      {
                        "$ref": "#/components/schemas/Cost"
                      },
                      {
                        "$ref": "#/components/schemas/WIP"
                      },
                      {
                        "$ref": "#/components/schemas/ThroughputTime"
                      },
                      {
                        "$ref": "#/components/schemas/ProcessingTime"
                      },
                      {
                        "$ref": "#/components/schemas/ProductiveTime"
                      },
                      {
                        "$ref": "#/components/schemas/StandbyTime"
                      },
                      {
                        "$ref": "#/components/schemas/SetupTime"
                      },
                      {
                        "$ref": "#/components/schemas/UnscheduledDowntime"
                      },
                      {
                        "$ref": "#/components/schemas/DynamicWIP"
                      },
                      {
                        "$ref": "#/components/schemas/DynamicThroughputTime"
                      }
                    ]
                  }
                },
                "examples": {
                  "Output": {
                    "summary": "Output KPI",
                    "value": {
                      "name": "output",
                      "target": "max",
                      "weight": 1,
                      "value": 34,
                      "context": [
                        "system",
                        "product_type"
                      ],
                      "product_type": "ProductType_1"
                    }
                  },
                  "Throughput": {
                    "summary": "Throughput KPI",
                    "value": {
                      "name": "throughput",
                      "target": "max",
                      "weight": 1,
                      "value": 4.32,
                      "context": [
                        "system",
                        "product_type"
                      ],
                      "product_type": "ProductType_1"
                    }
                  },
                  "Cost": {
                    "summary": "Cost KPI",
                    "value": {
                      "name": "cost",
                      "target": "min",
                      "weight": 0.5,
                      "value": 36000,
                      "context": [
                        "system"
                      ]
                    }
                  },
                  "WIP": {
                    "summary": "WIP KPI",
                    "value": {
                      "name": "WIP",
                      "target": "min",
                      "weight": 1,
                      "value": 121,
                      "context": [
                        "system",
                        "product_type"
                      ],
                      "product_type": "ProductType_1"
                    }
                  },
                  "ThroughputTime": {
                    "summary": "Throughput time KPI",
                    "value": {
                      "name": "throughput_time",
                      "target": "min",
                      "weight": 1,
                      "value": 221.1,
                      "context": [
                        "system",
                        "product_type"
                      ],
                      "product_type": "ProductType_1"
                    }
                  },
                  "ProcessingTime": {
                    "summary": "Processing time KPI",
                    "value": {
                      "name": "processing_time",
                      "target": "min",
                      "weight": 1,
                      "value": 1.2,
                      "context": [
                        "resource",
                        "process"
                      ],
                      "resource": "Resource_1",
                      "process": "P1"
                    }
                  },
                  "ProductiveTime": {
                    "summary": "Productive time KPI",
                    "value": {
                      "name": "productive_time",
                      "target": "max",
                      "weight": 1,
                      "value": 0.65,
                      "context": [
                        "resource"
                      ],
                      "resource": "Resource_1"
                    }
                  },
                  "StandbyTime": {
                    "summary": "Standby time KPI",
                    "value": {
                      "name": "standby_time",
                      "target": "min",
                      "weight": 1,
                      "value": 0.12,
                      "context": [
                        "resource"
                      ],
                      "resource": "Resource_1"
                    }
                  },
                  "SetupTime": {
                    "summary": "Setup time KPI",
                    "value": {
                      "name": "setup_time",
                      "target": "min",
                      "weight": 1,
                      "value": 0.08,
                      "context": [
                        "resource"
                      ],
                      "resource": "Resource_1"
                    }
                  },
                  "UnscheduledDowntime": {
                    "summary": "Unscheduled downtime KPI",
                    "value": {
                      "name": "unscheduled_downtime",
                      "target": "min",
                      "weight": 1,
                      "value": 0.1,
                      "context": [
                        "resource"
                      ],
                      "resource": "Resource_1"
                    }
                  },
                  "DynamicWIP": {
                    "summary": "Dynamic WIP KPI",
                    "value": {
                      "name": "dynamic_WIP",
                      "target": "min",
                      "weight": 1,
                      "value": 121,
                      "context": [
                        "system",
                        "product"
                      ],
                      "product_type": "ProductType_1",
                      "start_time": 21.2,
                      "end_time": 23.4
                    }
                  },
                  "DynamicThroughputTime": {
                    "summary": "Dynamic throughput time KPI",
                    "value": {
                      "name": "throughput_time",
                      "target": "min",
                      "weight": 1,
                      "value": 201.3,
                      "context": [
                        "system",
                        "product"
                      ],
                      "product_type": "ProductType_1",
                      "product": "Product_1_23"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No KPIs found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/time_models/": {
      "get": {
        "tags": [
          "time_models"
        ],
        "summary": "Read Time Models",
        "operationId": "read_time_models_projects__project_id__adapters__adapter_id__time_models__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned time models",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Time Models Projects  Project Id  Adapters  Adapter Id  Time Models  Get",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SequentialTimeModelData"
                      },
                      {
                        "$ref": "#/components/schemas/ManhattanDistanceTimeModelData"
                      },
                      {
                        "$ref": "#/components/schemas/FunctionTimeModelData"
                      }
                    ]
                  }
                },
                "example": [
                  {
                    "ID": "sequence_time_model_1",
                    "description": "Examplary sequence time model",
                    "sequence": [
                      25,
                      13,
                      15,
                      16,
                      17,
                      20,
                      21
                    ]
                  },
                  {
                    "ID": "function_time_model_1",
                    "description": "normal distribution time model with 20 minutes",
                    "distribution_function": "normal",
                    "location": 20,
                    "scale": 5
                  },
                  {
                    "ID": "manhattan_time_model_1",
                    "description": "manhattan time model with speed 180 m/min = 3 m/s",
                    "speed": 30,
                    "reaction_time": 0.15
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No time models found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/time_models/{time_model_id}": {
      "get": {
        "tags": [
          "time_models"
        ],
        "summary": "Read Time Model",
        "operationId": "read_time_model_projects__project_id__adapters__adapter_id__time_models__time_model_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Time Model Id",
              "type": "string"
            },
            "name": "time_model_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned time model",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Time Model Projects  Project Id  Adapters  Adapter Id  Time Models  Time Model Id  Get",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/SequentialTimeModelData"
                    },
                    {
                      "$ref": "#/components/schemas/ManhattanDistanceTimeModelData"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTimeModelData"
                    }
                  ]
                },
                "examples": {
                  "Sequential time model": {
                    "summary": "Sequential time model",
                    "value": {
                      "ID": "sequence_time_model_1",
                      "description": "Examplary sequence time model",
                      "sequence": [
                        25,
                        13,
                        15,
                        16,
                        17,
                        20,
                        21
                      ]
                    }
                  },
                  "Functional time model": {
                    "summary": "Function time model",
                    "value": {
                      "ID": "function_time_model_1",
                      "description": "normal distribution time model with 20 minutes",
                      "distribution_function": "normal",
                      "location": 20,
                      "scale": 5
                    }
                  },
                  "Manhattan Distance time model": {
                    "summary": "Manhattan time model",
                    "value": {
                      "ID": "manhattan_time_model_1",
                      "description": "manhattan time model with speed 180 m/min = 3 m/s",
                      "speed": 30,
                      "reaction_time": 0.15
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Time model not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "time_models"
        ],
        "summary": "Create Time Model",
        "operationId": "create_time_model_projects__project_id__adapters__adapter_id__time_models__time_model_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Time Model Id"
            },
            "name": "time_model_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Time Model",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SequentialTimeModelData"
                  },
                  {
                    "$ref": "#/components/schemas/ManhattanDistanceTimeModelData"
                  },
                  {
                    "$ref": "#/components/schemas/FunctionTimeModelData"
                  }
                ]
              },
              "examples": {
                "Sequential time model": {
                  "summary": "Sequential time model",
                  "value": {
                    "ID": "sequence_time_model_1",
                    "description": "Examplary sequence time model",
                    "sequence": [
                      25,
                      13,
                      15,
                      16,
                      17,
                      20,
                      21
                    ]
                  }
                },
                "Functional time model": {
                  "summary": "Function time model",
                  "value": {
                    "ID": "function_time_model_1",
                    "description": "normal distribution time model with 20 minutes",
                    "distribution_function": "normal",
                    "location": 20,
                    "scale": 5
                  }
                },
                "Manhattan Distance time model": {
                  "summary": "Manhattan time model",
                  "value": {
                    "ID": "manhattan_time_model_1",
                    "description": "manhattan time model with speed 180 m/min = 3 m/s",
                    "speed": 30,
                    "reaction_time": 0.15
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/processes/": {
      "get": {
        "tags": [
          "processes"
        ],
        "summary": "Read Processes",
        "operationId": "read_processes_projects__project_id__adapters__adapter_id__processes__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned processes",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Processes Projects  Project Id  Adapters  Adapter Id  Processes  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcessData"
                  }
                },
                "example": [
                  {
                    "ID": "P1",
                    "description": "Process 1",
                    "time_model_id": "function_time_model_1",
                    "type": "ProductionProcesses"
                  },
                  {
                    "ID": "TP1",
                    "description": "Transport Process 1",
                    "time_model_id": "manhattan_time_model_1",
                    "type": "TransportProcesses"
                  },
                  {
                    "ID": "P1",
                    "description": "Process 1",
                    "time_model_id": "function_time_model_1",
                    "type": "CapabilityProcesses",
                    "capability": "C1"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/processes/{process_id}": {
      "get": {
        "tags": [
          "processes"
        ],
        "summary": "Read Process",
        "operationId": "read_process_projects__project_id__adapters__adapter_id__processes__process_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Process Id",
              "type": "string"
            },
            "name": "process_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessData"
                },
                "examples": {
                  "Production process": {
                    "summary": "Production process",
                    "value": {
                      "ID": "P1",
                      "description": "Process 1",
                      "time_model_id": "function_time_model_1",
                      "type": "ProductionProcesses"
                    }
                  },
                  "Transport process": {
                    "summary": "Transport process",
                    "value": {
                      "ID": "TP1",
                      "description": "Transport Process 1",
                      "time_model_id": "manhattan_time_model_1",
                      "type": "TransportProcesses"
                    }
                  },
                  "Capability process": {
                    "summary": "Capability process",
                    "value": {
                      "ID": "P1",
                      "description": "Process 1",
                      "time_model_id": "function_time_model_1",
                      "type": "CapabilityProcesses",
                      "capability": "C1"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "processes"
        ],
        "summary": "Create Process",
        "operationId": "create_process_projects__project_id__adapters__adapter_id__processes__process_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Process Id"
            },
            "name": "process_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessData"
              },
              "examples": {
                "Production process": {
                  "summary": "Production process",
                  "value": {
                    "ID": "P1",
                    "description": "Process 1",
                    "time_model_id": "function_time_model_1",
                    "type": "ProductionProcesses"
                  }
                },
                "Transport process": {
                  "summary": "Transport process",
                  "value": {
                    "ID": "TP1",
                    "description": "Transport Process 1",
                    "time_model_id": "manhattan_time_model_1",
                    "type": "TransportProcesses"
                  }
                },
                "Capability process": {
                  "summary": "Capability process",
                  "value": {
                    "ID": "P1",
                    "description": "Process 1",
                    "time_model_id": "function_time_model_1",
                    "type": "CapabilityProcesses",
                    "capability": "C1"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/queues/": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "Read Queues",
        "operationId": "read_queues_projects__project_id__adapters__adapter_id__queues__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned queues",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Queues Projects  Project Id  Adapters  Adapter Id  Queues  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueData"
                  }
                },
                "example": [
                  {
                    "ID": "Q1",
                    "description": "Queue 1",
                    "capacity": 10
                  },
                  {
                    "ID": "Q1",
                    "description": "Queue 1",
                    "capacity": 0
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No queues found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/queues/{queue_id}": {
      "get": {
        "tags": [
          "queues"
        ],
        "summary": "Read Queue",
        "operationId": "read_queue_projects__project_id__adapters__adapter_id__queues__queue_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Queue Id",
              "type": "string"
            },
            "name": "queue_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned queue",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueData"
                },
                "examples": {
                  "Finite Queue": {
                    "summary": "Finite Queue",
                    "value": {
                      "ID": "Q1",
                      "description": "Queue 1",
                      "capacity": 10
                    }
                  },
                  "Infinite Queue": {
                    "summary": "Infinite Queue",
                    "value": {
                      "ID": "Q1",
                      "description": "Queue 1",
                      "capacity": 0
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Queue not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "queues"
        ],
        "summary": "Create Queue",
        "operationId": "create_queue_projects__project_id__adapters__adapter_id__queues__queue_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Queue Id",
              "type": "string"
            },
            "name": "queue_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueData"
              },
              "examples": {
                "Finite Queue": {
                  "summary": "Finite Queue",
                  "value": {
                    "ID": "Q1",
                    "description": "Queue 1",
                    "capacity": 10
                  }
                },
                "Infinite Queue": {
                  "summary": "Infinite Queue",
                  "value": {
                    "ID": "Q1",
                    "description": "Queue 1",
                    "capacity": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/resources/": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Read Resources",
        "operationId": "read_resources_projects__project_id__adapters__adapter_id__resources__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned resources",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Resources Projects  Project Id  Adapters  Adapter Id  Resources  Get",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ProductionResourceData"
                      },
                      {
                        "$ref": "#/components/schemas/TransportResourceData"
                      }
                    ]
                  }
                },
                "example": [
                  {
                    "ID": "R1",
                    "description": "Resource 1",
                    "capacity": 2,
                    "location": [
                      10,
                      10
                    ],
                    "controller": "PipelineController",
                    "control_policy": "FIFO",
                    "process_ids": [
                      "P1",
                      "P2"
                    ],
                    "process_capacities": [
                      2,
                      1
                    ],
                    "states": [
                      "Breakdownstate_1",
                      "Setup_State_1",
                      "Setup_State_2",
                      "ProcessBreakdownState_1"
                    ],
                    "input_queues": [
                      "IQ1"
                    ],
                    "output_queues": [
                      "OQ1"
                    ]
                  },
                  {
                    "ID": "TR1",
                    "description": "Transport Resource 1",
                    "capacity": 1,
                    "location": [
                      15,
                      15
                    ],
                    "controller": "TransportController",
                    "control_policy": "FIFO",
                    "process_ids": [
                      "TP1"
                    ],
                    "states": [
                      "Breakdownstate_1"
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No resources found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/resources/{resource_id}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Read Resource",
        "operationId": "read_resource_projects__project_id__adapters__adapter_id__resources__resource_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Resource Id",
              "type": "string"
            },
            "name": "resource_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned resource",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Resource Projects  Project Id  Adapters  Adapter Id  Resources  Resource Id  Get",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProductionResourceData"
                    },
                    {
                      "$ref": "#/components/schemas/TransportResourceData"
                    }
                  ]
                },
                "examples": {
                  "Production Resource": {
                    "summary": "Production Resource Data",
                    "value": {
                      "ID": "R1",
                      "description": "Resource 1",
                      "capacity": 2,
                      "location": [
                        10,
                        10
                      ],
                      "controller": "PipelineController",
                      "control_policy": "FIFO",
                      "process_ids": [
                        "P1",
                        "P2"
                      ],
                      "process_capacities": [
                        2,
                        1
                      ],
                      "states": [
                        "Breakdownstate_1",
                        "Setup_State_1",
                        "Setup_State_2",
                        "ProcessBreakdownState_1"
                      ],
                      "input_queues": [
                        "IQ1"
                      ],
                      "output_queues": [
                        "OQ1"
                      ]
                    }
                  },
                  "Transport Resource": {
                    "summary": "Transport Resource Data",
                    "value": {
                      "ID": "TR1",
                      "description": "Transport Resource 1",
                      "capacity": 1,
                      "location": [
                        15,
                        15
                      ],
                      "controller": "TransportController",
                      "control_policy": "FIFO",
                      "process_ids": [
                        "TP1"
                      ],
                      "states": [
                        "Breakdownstate_1"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resources"
        ],
        "summary": "Create Resource",
        "operationId": "create_resource_projects__project_id__adapters__adapter_id__resources__resource_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Resource Id",
              "type": "string"
            },
            "name": "resource_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Resource",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProductionResourceData"
                  },
                  {
                    "$ref": "#/components/schemas/TransportResourceData"
                  }
                ]
              },
              "examples": {
                "Production Resource": {
                  "summary": "Production Resource Data",
                  "value": {
                    "ID": "R1",
                    "description": "Resource 1",
                    "capacity": 2,
                    "location": [
                      10,
                      10
                    ],
                    "controller": "PipelineController",
                    "control_policy": "FIFO",
                    "process_ids": [
                      "P1",
                      "P2"
                    ],
                    "process_capacities": [
                      2,
                      1
                    ],
                    "states": [
                      "Breakdownstate_1",
                      "Setup_State_1",
                      "Setup_State_2",
                      "ProcessBreakdownState_1"
                    ],
                    "input_queues": [
                      "IQ1"
                    ],
                    "output_queues": [
                      "OQ1"
                    ]
                  }
                },
                "Transport Resource": {
                  "summary": "Transport Resource Data",
                  "value": {
                    "ID": "TR1",
                    "description": "Transport Resource 1",
                    "capacity": 1,
                    "location": [
                      15,
                      15
                    ],
                    "controller": "TransportController",
                    "control_policy": "FIFO",
                    "process_ids": [
                      "TP1"
                    ],
                    "states": [
                      "Breakdownstate_1"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resources"
        ],
        "summary": "Delete Resource",
        "operationId": "delete_resource_projects__project_id__adapters__adapter_id__resources__resource_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Resource Id",
              "type": "string"
            },
            "name": "resource_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/sinks/": {
      "get": {
        "tags": [
          "sinks"
        ],
        "summary": "Read Sinks",
        "operationId": "read_sinks_projects__project_id__adapters__adapter_id__sinks__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully returned sink data",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Sinks Projects  Project Id  Adapters  Adapter Id  Sinks  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SinkData"
                  }
                },
                "example": [
                  {
                    "ID": "SK1",
                    "description": "Sink 1",
                    "location": [
                      50,
                      50
                    ],
                    "product_type": "Product_1",
                    "input_queues": [
                      "SinkQueue"
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No sink data found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/sinks/{sink_id}": {
      "get": {
        "tags": [
          "sinks"
        ],
        "summary": "Read Sink",
        "operationId": "read_sink_projects__project_id__adapters__adapter_id__sinks__sink_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Sink Id",
              "type": "string"
            },
            "name": "sink_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfulle returned sink data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SinkData"
                },
                "example": {
                  "summary": "Sink",
                  "value": {
                    "ID": "SK1",
                    "description": "Sink 1",
                    "location": [
                      50,
                      50
                    ],
                    "product_type": "Product_1",
                    "input_queues": [
                      "SinkQueue"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sink not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sinks"
        ],
        "summary": "Create Sink",
        "operationId": "create_sink_projects__project_id__adapters__adapter_id__sinks__sink_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Sink Id",
              "type": "string"
            },
            "name": "sink_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SinkData"
              },
              "example": {
                "summary": "Sink",
                "value": {
                  "ID": "SK1",
                  "description": "Sink 1",
                  "location": [
                    50,
                    50
                  ],
                  "product_type": "Product_1",
                  "input_queues": [
                    "SinkQueue"
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/sources/": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Read Sources",
        "operationId": "read_sources_projects__project_id__adapters__adapter_id__sources__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully returned source data",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Sources Projects  Project Id  Adapters  Adapter Id  Sources  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SourceData"
                  }
                },
                "example": [
                  {
                    "ID": "S1",
                    "description": "Source 1",
                    "location": [
                      0,
                      0
                    ],
                    "product_type": "Product_1",
                    "time_model_id": "function_time_model_4",
                    "router": "SimpleRouter",
                    "routing_heuristic": "shortest_queue",
                    "output_queues": [
                      "SourceQueue"
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No source data found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/sources/{source_id}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Read Source",
        "operationId": "read_source_projects__project_id__adapters__adapter_id__sources__source_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Source Id",
              "type": "string"
            },
            "name": "source_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfulle returned source data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceData"
                },
                "example": {
                  "summary": "Source",
                  "value": {
                    "ID": "S1",
                    "description": "Source 1",
                    "location": [
                      0,
                      0
                    ],
                    "product_type": "Product_1",
                    "time_model_id": "function_time_model_4",
                    "router": "SimpleRouter",
                    "routing_heuristic": "shortest_queue",
                    "output_queues": [
                      "SourceQueue"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Sink not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sources"
        ],
        "summary": "Create Sink",
        "operationId": "create_sink_projects__project_id__adapters__adapter_id__sources__source_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Source Id",
              "type": "string"
            },
            "name": "source_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceData"
              },
              "example": {
                "summary": "Source",
                "value": {
                  "ID": "S1",
                  "description": "Source 1",
                  "location": [
                    0,
                    0
                  ],
                  "product_type": "Product_1",
                  "time_model_id": "function_time_model_4",
                  "router": "SimpleRouter",
                  "routing_heuristic": "shortest_queue",
                  "output_queues": [
                    "SourceQueue"
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/states/": {
      "get": {
        "tags": [
          "states"
        ],
        "summary": "Read States",
        "operationId": "read_states_projects__project_id__adapters__adapter_id__states__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned states",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read States Projects  Project Id  Adapters  Adapter Id  States  Get",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/BreakDownStateData"
                      },
                      {
                        "$ref": "#/components/schemas/ProductionStateData"
                      },
                      {
                        "$ref": "#/components/schemas/TransportStateData"
                      },
                      {
                        "$ref": "#/components/schemas/SetupStateData"
                      },
                      {
                        "$ref": "#/components/schemas/ProcessBreakDownStateData"
                      }
                    ]
                  }
                },
                "example": [
                  {
                    "ID": "Breakdownstate_1",
                    "description": "Breakdown state machine 1",
                    "time_model_id": "function_time_model_5",
                    "type": "BreakDownState",
                    "repair_time_model_id": "function_time_model_8"
                  },
                  {
                    "ID": "ProductionState_1",
                    "description": "Production state machine 1",
                    "time_model_id": "function_time_model_1",
                    "type": "ProductionState"
                  },
                  {
                    "ID": "TransportState_1",
                    "description": "Transport state machine 1",
                    "time_model_id": "function_time_model_3",
                    "type": "TransportState"
                  },
                  {
                    "ID": "ProcessBreakDownState_1",
                    "description": "Process Breakdown state machine 1",
                    "time_model_id": "function_time_model_7",
                    "type": "ProcessBreakDownState",
                    "process_id": "P1",
                    "repair_time_model_id": "function_time_model_8"
                  },
                  {
                    "ID": "Setup_State_2",
                    "description": "Setup state machine 2",
                    "time_model_id": "function_time_model_2",
                    "type": "SetupState",
                    "origin_setup": "P2",
                    "target_setup": "P1"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No states found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/states/{state_id}": {
      "get": {
        "tags": [
          "states"
        ],
        "summary": "Read State",
        "operationId": "read_state_projects__project_id__adapters__adapter_id__states__state_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "State Id",
              "type": "string"
            },
            "name": "state_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned state",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read State Projects  Project Id  Adapters  Adapter Id  States  State Id  Get",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BreakDownStateData"
                    },
                    {
                      "$ref": "#/components/schemas/ProductionStateData"
                    },
                    {
                      "$ref": "#/components/schemas/TransportStateData"
                    },
                    {
                      "$ref": "#/components/schemas/SetupStateData"
                    },
                    {
                      "$ref": "#/components/schemas/ProcessBreakDownStateData"
                    }
                  ]
                },
                "examples": {
                  "BreakDownState": {
                    "summary": "Breakdown state",
                    "value": {
                      "ID": "Breakdownstate_1",
                      "description": "Breakdown state machine 1",
                      "time_model_id": "function_time_model_5",
                      "type": "BreakDownState",
                      "repair_time_model_id": "function_time_model_8"
                    }
                  },
                  "ProductionState": {
                    "summary": "Production state",
                    "value": {
                      "ID": "ProductionState_1",
                      "description": "Production state machine 1",
                      "time_model_id": "function_time_model_1",
                      "type": "ProductionState"
                    }
                  },
                  "TransportState": {
                    "summary": "Transport state",
                    "value": {
                      "ID": "TransportState_1",
                      "description": "Transport state machine 1",
                      "time_model_id": "function_time_model_3",
                      "type": "TransportState"
                    }
                  },
                  "ProcessBreakDownState": {
                    "summary": "Process breakdown state",
                    "value": {
                      "ID": "ProcessBreakDownState_1",
                      "description": "Process Breakdown state machine 1",
                      "time_model_id": "function_time_model_7",
                      "type": "ProcessBreakDownState",
                      "process_id": "P1",
                      "repair_time_model_id": "function_time_model_8"
                    }
                  },
                  "SetupState": {
                    "summary": "Setup state",
                    "value": {
                      "ID": "Setup_State_2",
                      "description": "Setup state machine 2",
                      "time_model_id": "function_time_model_2",
                      "type": "SetupState",
                      "origin_setup": "P2",
                      "target_setup": "P1"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No state found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "states"
        ],
        "summary": "Create State",
        "operationId": "create_state_projects__project_id__adapters__adapter_id__states__state_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "State Id"
            },
            "name": "state_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "State",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BreakDownStateData"
                  },
                  {
                    "$ref": "#/components/schemas/ProductionStateData"
                  },
                  {
                    "$ref": "#/components/schemas/TransportStateData"
                  },
                  {
                    "$ref": "#/components/schemas/SetupStateData"
                  },
                  {
                    "$ref": "#/components/schemas/ProcessBreakDownStateData"
                  }
                ]
              },
              "examples": {
                "BreakDownState": {
                  "summary": "Breakdown state",
                  "value": {
                    "ID": "Breakdownstate_1",
                    "description": "Breakdown state machine 1",
                    "time_model_id": "function_time_model_5",
                    "type": "BreakDownState",
                    "repair_time_model_id": "function_time_model_8"
                  }
                },
                "ProductionState": {
                  "summary": "Production state",
                  "value": {
                    "ID": "ProductionState_1",
                    "description": "Production state machine 1",
                    "time_model_id": "function_time_model_1",
                    "type": "ProductionState"
                  }
                },
                "TransportState": {
                  "summary": "Transport state",
                  "value": {
                    "ID": "TransportState_1",
                    "description": "Transport state machine 1",
                    "time_model_id": "function_time_model_3",
                    "type": "TransportState"
                  }
                },
                "ProcessBreakDownState": {
                  "summary": "Process breakdown state",
                  "value": {
                    "ID": "ProcessBreakDownState_1",
                    "description": "Process Breakdown state machine 1",
                    "time_model_id": "function_time_model_7",
                    "type": "ProcessBreakDownState",
                    "process_id": "P1",
                    "repair_time_model_id": "function_time_model_8"
                  }
                },
                "SetupState": {
                  "summary": "Setup state",
                  "value": {
                    "ID": "Setup_State_2",
                    "description": "Setup state machine 2",
                    "time_model_id": "function_time_model_2",
                    "type": "SetupState",
                    "origin_setup": "P2",
                    "target_setup": "P1"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Read Scenario",
        "operationId": "read_scenario_projects__project_id__adapters__adapter_id__scenario__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Create Scenario",
        "operationId": "create_scenario_projects__project_id__adapters__adapter_id__scenario__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/contraints": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Read Scenario Constrains",
        "operationId": "read_scenario_constrains_projects__project_id__adapters__adapter_id__scenario_contraints_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioConstrainsData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/constraints": {
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Create Scenario Constrains",
        "operationId": "create_scenario_constrains_projects__project_id__adapters__adapter_id__scenario_constraints_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioConstrainsData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/info": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Read Scenario Info",
        "operationId": "read_scenario_info_projects__project_id__adapters__adapter_id__scenario_info_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioInfoData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Create Scenario Info",
        "operationId": "create_scenario_info_projects__project_id__adapters__adapter_id__scenario_info_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioInfoData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/options": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Read Scenario Options",
        "operationId": "read_scenario_options_projects__project_id__adapters__adapter_id__scenario_options_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioOptionsData"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Create Scenario Options",
        "operationId": "create_scenario_options_projects__project_id__adapters__adapter_id__scenario_options_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioOptionsData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/adapters/{adapter_id}/scenario/objectives": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Read Scenario Objectives",
        "operationId": "read_scenario_objectives_projects__project_id__adapters__adapter_id__scenario_objectives_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully returned objectives",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Scenario Objectives Projects  Project Id  Adapters  Adapter Id  Scenario Objectives Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Objective"
                  }
                },
                "example": [
                  {
                    "name": "cost",
                    "weight": 0.6
                  },
                  {
                    "name": "throughput",
                    "weight": 0.1
                  },
                  {
                    "name": "WIP",
                    "weight": 0.5
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No objectives found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Create Scenario Objectives",
        "operationId": "create_scenario_objectives_projects__project_id__adapters__adapter_id__scenario_objectives_put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Adapter Id",
              "type": "string"
            },
            "name": "adapter_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Objectives",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Objective"
                }
              },
              "example": [
                {
                  "name": "cost",
                  "weight": 0.6
                },
                {
                  "name": "throughput",
                  "weight": 0.1
                },
                {
                  "name": "WIP",
                  "weight": 0.5
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Root  Get",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BreakDownStateData": {
        "title": "BreakDownStateData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type",
          "repair_time_model_id"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "BreakDownState"
            ],
            "type": "string"
          },
          "repair_time_model_id": {
            "title": "Repair Time Model Id",
            "type": "string"
          }
        },
        "description": "Class that represents a breakdown state.\n\nArgs:\n    ID (str): ID of the state.\n    description (str): Description of the state.\n    time_model_id (str): Time model ID of the state. Specifies the time interval between breakdowns.\n    type (StateTypeEnum): Type of the state.\n    repair_time_model_id (str): Time model ID of the repair time.\n\nExamples:\n    Breakdown state with a function time model:\n    ``` py  \n    import prodsys\n    prodsys.state_data.BreakDownStateData(\n        ID=\"Breakdownstate_1\",\n        description=\"Breakdown state machine 1\",\n        time_model_id=\"function_time_model_5\",\n        repair_time_model_id=\"function_time_model_8\",\n    )\n    ```",
        "example": {
          "summary": "Breakdown state",
          "value": {
            "ID": "Breakdownstate_1",
            "description": "Breakdown state machine 1",
            "time_model_id": "function_time_model_5",
            "type": "BreakDownState",
            "repair_time_model_id": "function_time_model_8"
          }
        }
      },
      "CapabilityProcessData": {
        "title": "CapabilityProcessData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type",
          "capability"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "CapabilityProcesses"
            ],
            "type": "string"
          },
          "capability": {
            "title": "Capability",
            "type": "string"
          }
        },
        "description": "Class that represents capability process data. Capability processes are not compared by their IDs but their Capabilities.\n\nArgs:\n    ID (str): ID of the process.\n    description (str): Description of the process.\n    time_model_id (str): ID of the time model of the process.\n    type (Literal[ProcessTypeEnum.CapabilityProcesses]): Type of the process.\n    capability (str): Capability of the process.\n\nExamples:\n    A capability process with ID \"P1\", description \"Process 1\", time model ID \"function_time_model_1\" and capability \"C1\":\n    ``` py\n    import prodsys\n    prodsys.processes_data.CapabilityProcessData(\n        ID=\"P1\",\n        description=\"Process 1\",\n        time_model_id=\"function_time_model_1\",\n        type=\"CapabilityProcesses\",\n        capability=\"C1\",\n    )\n    ```",
        "example": {
          "summary": "Capability process",
          "value": {
            "ID": "P1",
            "description": "Process 1",
            "time_model_id": "function_time_model_1",
            "type": "CapabilityProcesses",
            "capability": "C1"
          }
        }
      },
      "Cost": {
        "title": "Cost",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "cost"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Cost KPI",
          "value": {
            "name": "cost",
            "target": "min",
            "weight": 0.5,
            "value": 36000,
            "context": [
              "system"
            ]
          }
        }
      },
      "DynamicThroughputTime": {
        "title": "DynamicThroughputTime",
        "required": [
          "name",
          "start_time",
          "end_time"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "dynamic_throughput_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          },
          "start_time": {
            "title": "Start Time",
            "type": "number"
          },
          "end_time": {
            "title": "End Time",
            "type": "number"
          },
          "product": {
            "title": "Product",
            "type": "string"
          },
          "process": {
            "title": "Process",
            "type": "string"
          }
        },
        "description": "Class that represents a dynamic KPI. Not intended for usage but only inheritance.",
        "example": {
          "summary": "Dynamic throughput time KPI",
          "value": {
            "name": "throughput_time",
            "target": "min",
            "weight": 1,
            "value": 201.3,
            "context": [
              "system",
              "product"
            ],
            "product_type": "ProductType_1",
            "product": "Product_1_23"
          }
        }
      },
      "DynamicWIP": {
        "title": "DynamicWIP",
        "required": [
          "name",
          "start_time",
          "end_time"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "dynamic_WIP"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          },
          "start_time": {
            "title": "Start Time",
            "type": "number"
          },
          "end_time": {
            "title": "End Time",
            "type": "number"
          },
          "product": {
            "title": "Product",
            "type": "string"
          },
          "process": {
            "title": "Process",
            "type": "string"
          }
        },
        "description": "Class that represents a dynamic KPI. Not intended for usage but only inheritance.",
        "example": {
          "summary": "Dynamic WIP KPI",
          "value": {
            "name": "dynamic_WIP",
            "target": "min",
            "weight": 1,
            "value": 121,
            "context": [
              "system",
              "product"
            ],
            "product_type": "ProductType_1",
            "start_time": 21.2,
            "end_time": 23.4
          }
        }
      },
      "Event": {
        "title": "Event",
        "required": [
          "time",
          "resource",
          "state",
          "state_type",
          "activity"
        ],
        "type": "object",
        "properties": {
          "time": {
            "title": "Time",
            "type": "number"
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "state": {
            "title": "State",
            "type": "string"
          },
          "state_type": {
            "title": "State Type",
            "type": "string"
          },
          "activity": {
            "title": "Activity",
            "type": "string"
          },
          "product": {
            "title": "Product",
            "type": "string"
          },
          "expected_end_time": {
            "title": "Expected End Time",
            "type": "number"
          },
          "target_location": {
            "title": "Target Location",
            "type": "string"
          }
        },
        "description": "Class that represents an event in the event log.\n\nArgs:\n    time (float): Time of the event.\n    resource (str): Resource of the event.\n    state (str): State of the event.\n    state_type (str): State type of the event, representing a state.StateTypeEnum.\n    activity (str): Activity of the event, representing a state.StateEnum.\n    product (Optional[str], optional): Product of the event. Defaults to None.\n    expected_end_time (Optional[float], optional): Expected end time of the event. Defaults to None.\n    target_location (Optional[str], optional): Target location of the event. Defaults to None.",
        "examples": {
          "Process starts event": {
            "summary": "Process starts event",
            "value": {
              "time": 12,
              "resource": "R1",
              "state": "P1",
              "state_type": "Production",
              "activity": "start state",
              "product": "Product_1_12",
              "expected_end_time": 24.3
            }
          },
          "Process ends event": {
            "summary": "Process ends event",
            "value": {
              "time": 24.3,
              "resource": "R1",
              "state": "P1",
              "state_type": "Production",
              "activity": "end state",
              "product": "Product_1_12"
            }
          }
        }
      },
      "EvolutionaryAlgorithmHyperparameters": {
        "title": "EvolutionaryAlgorithmHyperparameters",
        "type": "object",
        "properties": {
          "seed": {
            "title": "Seed",
            "type": "integer",
            "description": "Seed for the random number generator.",
            "default": 0
          },
          "number_of_generations": {
            "title": "Number Of Generations",
            "type": "integer",
            "default": 10
          },
          "population_size": {
            "title": "Population Size",
            "type": "integer",
            "default": 10
          },
          "mutation_rate": {
            "title": "Mutation Rate",
            "type": "number",
            "default": 0.1
          },
          "crossover_rate": {
            "title": "Crossover Rate",
            "type": "number",
            "default": 0.1
          },
          "number_of_processes": {
            "title": "Number Of Processes",
            "type": "integer",
            "default": 1
          }
        },
        "description": "Hyperparameters for configuration optimization using an evolutionary algorithm.\n\nArgs:\n    seed (int): Seed for the random number generator.\n    number_of_generations (int): Number of generations to run the algorithm.\n    population_size (int): Number of individuals in each generation.\n    mutation_rate (float): Probability of mutating an individual.\n    crossover_rate (float): Probability of crossover between two individuals.\n    number_of_processes (int): Number of processes to use for parallelization.",
        "example": {
          "summary": "Evolutionary Algorithm Hperparameters",
          "value": {
            "seed": 0,
            "number_of_generations": 10,
            "population_size": 10,
            "mutation_rate": 0.1,
            "crossover_rate": 0.1,
            "number_of_processes": 1
          }
        }
      },
      "FunctionTimeModelData": {
        "title": "FunctionTimeModelData",
        "required": [
          "ID",
          "description",
          "distribution_function",
          "location",
          "scale"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "distribution_function": {
            "$ref": "#/components/schemas/FunctionTimeModelEnum"
          },
          "location": {
            "title": "Location",
            "type": "number"
          },
          "scale": {
            "title": "Scale",
            "type": "number"
          },
          "batch_size": {
            "title": "Batch Size",
            "type": "integer",
            "default": 100,
            "init": false
          }
        },
        "description": "Class that represents a time model that is based on a function and represents the timely values by their distribution function.\n\nArgs:\n    ID (str): ID of the time model.\n    description (str): Description of the time model.\n    distribution_function (FunctionTimeModelEnum): Zype of the distribution function of the time model.\n    location (float): Location parameter of the distribution function.\n    scale (float): Scale parameter of the distribution function.\n\nExamples:\n    Normal distribution time model with 20 minutes:\n    ``` py\n    import prodsys\n    prodsys.time_model_data.FunctionTimeModelData(\n        ID=\"function_time_model_1\",\n        description=\"normal distribution time model with 20 minutes\",\n        distribution_function=prodsys.FunctionTimeModelEnum.normal,\n        location=20.0,\n        scale=5.0,\n    )\n    ```",
        "example": {
          "summary": "Function time model",
          "value": {
            "ID": "function_time_model_1",
            "description": "normal distribution time model with 20 minutes",
            "distribution_function": "normal",
            "location": 20,
            "scale": 5
          }
        }
      },
      "FunctionTimeModelEnum": {
        "title": "FunctionTimeModelEnum",
        "enum": [
          "constant",
          "exponential",
          "normal",
          "lognormal"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "JsonProductionSystemAdapter": {
        "title": "JsonProductionSystemAdapter",
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string",
            "default": ""
          },
          "seed": {
            "title": "Seed",
            "type": "integer",
            "default": 0
          },
          "time_model_data": {
            "title": "Time Model Data",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SequentialTimeModelData"
                },
                {
                  "$ref": "#/components/schemas/ManhattanDistanceTimeModelData"
                },
                {
                  "$ref": "#/components/schemas/FunctionTimeModelData"
                }
              ]
            },
            "default": []
          },
          "state_data": {
            "title": "State Data",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BreakDownStateData"
                },
                {
                  "$ref": "#/components/schemas/ProductionStateData"
                },
                {
                  "$ref": "#/components/schemas/TransportStateData"
                },
                {
                  "$ref": "#/components/schemas/SetupStateData"
                },
                {
                  "$ref": "#/components/schemas/ProcessBreakDownStateData"
                }
              ]
            },
            "default": []
          },
          "process_data": {
            "title": "Process Data",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductionProcessData"
                },
                {
                  "$ref": "#/components/schemas/TransportProcessData"
                },
                {
                  "$ref": "#/components/schemas/CapabilityProcessData"
                }
              ]
            },
            "default": []
          },
          "queue_data": {
            "title": "Queue Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueData"
            },
            "default": []
          },
          "resource_data": {
            "title": "Resource Data",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductionResourceData"
                },
                {
                  "$ref": "#/components/schemas/TransportResourceData"
                }
              ]
            },
            "default": []
          },
          "product_data": {
            "title": "Product Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductData"
            },
            "default": []
          },
          "sink_data": {
            "title": "Sink Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SinkData"
            },
            "default": []
          },
          "source_data": {
            "title": "Source Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceData"
            },
            "default": []
          },
          "scenario_data": {
            "$ref": "#/components/schemas/ScenarioData"
          },
          "valid_configuration": {
            "title": "Valid Configuration",
            "type": "boolean",
            "default": true
          },
          "reconfiguration_cost": {
            "title": "Reconfiguration Cost",
            "type": "number",
            "default": 0
          }
        },
        "description": "JsonProductionSystemAdapter is a class that implements the abstract class ProductionSystemAdapter and allows to read and write data from and to a json file.\n\nArgs:\n    ID (str, optional): ID of the production system. Defaults to \"\".\n    seed (int, optional): Seed for the random number generator used in simulation. Defaults to 0.\n    time_model_data (List[time_model_data.TIME_MODEL_DATA], optional): List of time models used by the entities in the production system. Defaults to [].\n    state_data (List[state_data.STATE_DATA_UNION], optional): List of states used by the resources in the production system. Defaults to [].\n    process_data (List[processes_data.PROCESS_DATA_UNION], optional): List of processes required by products and provided by resources in the production system. Defaults to [].\n    queue_data (List[queue_data.QueueData], optional): List of queues used by the resources, sources and sinks in the production system. Defaults to [].\n    resource_data (List[resource_data.RESOURCE_DATA_UNION], optional): List of resources in the production system. Defaults to [].\n    product_data (List[product_data.ProductData], optional): List of products in the production system. Defaults to [].\n    sink_data (List[sink_data.SinkData], optional): List of sinks in the production system. Defaults to [].\n    source_data (List[source_data.SourceData], optional): List of sources in the production system. Defaults to [].\n    scenario_data (Optional[scenario_data.ScenarioData], optional): Scenario data of the production system used for optimization. Defaults to None.\n    valid_configuration (bool, optional): Indicates if the configuration is valid. Defaults to True.\n    reconfiguration_cost (float, optional): Cost of reconfiguration in a optimization scenario. Defaults to 0.",
        "example": {
          "ID": "",
          "valid_configuration": true,
          "reconfiguration_cost": 0,
          "seed": 24,
          "time_model_data": [
            {
              "ID": "function_time_model_1",
              "description": "normal distribution time model with 20 minutes",
              "distribution_function": "normal",
              "location": 14.3,
              "scale": 5,
              "batch_size": 100
            },
            {
              "ID": "function_time_model_2",
              "description": "constant distribution time model with 10 minutes",
              "distribution_function": "constant",
              "location": 15,
              "scale": 0,
              "batch_size": 100
            },
            {
              "ID": "function_time_model_3",
              "description": "normal distribution time model with 20 minutes",
              "distribution_function": "normal",
              "location": 20,
              "scale": 5,
              "batch_size": 100
            },
            {
              "ID": "function_time_model_4",
              "description": "exponential distribution time model with 100 minutes",
              "distribution_function": "exponential",
              "location": 52,
              "scale": 0,
              "batch_size": 100
            },
            {
              "ID": "function_time_model_5",
              "description": "exponential distribution time model with 150 minutes",
              "distribution_function": "exponential",
              "location": 150,
              "scale": 0,
              "batch_size": 100
            },
            {
              "ID": "sequential_time_model_1",
              "description": "Sequential time model",
              "sequence": [
                25,
                13,
                15,
                16,
                17,
                20,
                21
              ]
            },
            {
              "ID": "manhattan_time_model_1",
              "description": "manhattan time model with speed 180 m/min = 3 m/s",
              "speed": 30,
              "reaction_time": 0.15
            },
            {
              "ID": "function_time_model_7",
              "description": "exponential distribution time model with 300 minutes",
              "distribution_function": "exponential",
              "location": 300,
              "scale": 0,
              "batch_size": 100
            },
            {
              "ID": "function_time_model_8",
              "description": "normal distribution time model with 15 minutes",
              "distribution_function": "normal",
              "location": 15,
              "scale": 3,
              "batch_size": 100
            }
          ],
          "state_data": [
            {
              "ID": "Breakdownstate_1",
              "description": "Breakdown state machine 1",
              "time_model_id": "function_time_model_5",
              "type": "BreakDownState",
              "repair_time_model_id": "function_time_model_8"
            },
            {
              "ID": "Breakdownstate_2",
              "description": "Breakdown state machine 2",
              "time_model_id": "function_time_model_5",
              "type": "BreakDownState",
              "repair_time_model_id": "function_time_model_8"
            },
            {
              "ID": "Setup_State_1",
              "description": "Setup state machine 1",
              "time_model_id": "function_time_model_2",
              "type": "SetupState",
              "origin_setup": "P1",
              "target_setup": "P2"
            },
            {
              "ID": "Setup_State_2",
              "description": "Setup state machine 2",
              "time_model_id": "function_time_model_2",
              "type": "SetupState",
              "origin_setup": "P2",
              "target_setup": "P1"
            },
            {
              "ID": "Setup_State_3",
              "description": "Setup state machine 3",
              "time_model_id": "function_time_model_2",
              "type": "SetupState",
              "origin_setup": "P1",
              "target_setup": "P3"
            },
            {
              "ID": "Setup_State_4",
              "description": "Setup state machine 3",
              "time_model_id": "function_time_model_3",
              "type": "SetupState",
              "origin_setup": "P3",
              "target_setup": "P1"
            },
            {
              "ID": "ProcessBreakdownState_1",
              "description": "Breakdown state process 1",
              "time_model_id": "function_time_model_7",
              "type": "ProcessBreakDownState",
              "repair_time_model_id": "function_time_model_8",
              "process_id": "P1"
            }
          ],
          "process_data": [
            {
              "ID": "P1",
              "description": "Process 1",
              "time_model_id": "function_time_model_1",
              "type": "ProductionProcesses"
            },
            {
              "ID": "P2",
              "description": "Process 2",
              "time_model_id": "function_time_model_2",
              "type": "ProductionProcesses"
            },
            {
              "ID": "P3",
              "description": "Process 3",
              "time_model_id": "function_time_model_3",
              "type": "ProductionProcesses"
            },
            {
              "ID": "TP1",
              "description": "Transport Process 1",
              "time_model_id": "manhattan_time_model_1",
              "type": "TransportProcesses"
            }
          ],
          "queue_data": [
            {
              "ID": "IQ1",
              "description": "Input-queue 1 for R1",
              "capacity": 10
            },
            {
              "ID": "OQ1",
              "description": "Output-queue 1 for R1",
              "capacity": 10
            },
            {
              "ID": "OQ2",
              "description": "Output-queue 2 for R2",
              "capacity": 10
            },
            {
              "ID": "IQ2",
              "description": "Input-queue 2 for R3",
              "capacity": 10
            },
            {
              "ID": "OQ3",
              "description": "Output-queue 3 for R3",
              "capacity": 10
            },
            {
              "ID": "SourceQueue",
              "description": "Output-Queue for all sources",
              "capacity": 0
            },
            {
              "ID": "SinkQueue",
              "description": "Input-Queue for all sinks",
              "capacity": 0
            },
            {
              "ID": "IQ9",
              "description": "Input-queue 1 for R2",
              "capacity": 10
            }
          ],
          "resource_data": [
            {
              "ID": "R1",
              "description": "Resource 1",
              "capacity": 2,
              "location": [
                10,
                10
              ],
              "controller": "PipelineController",
              "control_policy": "FIFO",
              "process_ids": [
                "P1",
                "P2"
              ],
              "process_capacities": [
                2,
                1
              ],
              "state_ids": [
                "Breakdownstate_1",
                "Setup_State_1",
                "Setup_State_2",
                "ProcessBreakdownState_1"
              ],
              "input_queues": [
                "IQ1"
              ],
              "output_queues": [
                "OQ1"
              ]
            },
            {
              "ID": "R2",
              "description": "Resource 2",
              "capacity": 1,
              "location": [
                20,
                10
              ],
              "controller": "PipelineController",
              "control_policy": "FIFO",
              "process_ids": [
                "P2",
                "P3"
              ],
              "state_ids": [
                "Breakdownstate_2"
              ],
              "input_queues": [
                "IQ9"
              ],
              "output_queues": [
                "OQ2"
              ]
            },
            {
              "ID": "R3",
              "description": "Resource 3",
              "capacity": 2,
              "location": [
                20,
                20
              ],
              "controller": "PipelineController",
              "control_policy": "FIFO",
              "process_ids": [
                "P1",
                "P3"
              ],
              "process_capacities": [
                1,
                2
              ],
              "state_ids": [
                "Breakdownstate_1",
                "Breakdownstate_2",
                "Setup_State_3",
                "Setup_State_4"
              ],
              "input_queues": [
                "IQ2"
              ],
              "output_queues": [
                "OQ3"
              ]
            },
            {
              "ID": "R4",
              "description": "Resource 3",
              "capacity": 2,
              "location": [
                10,
                20
              ],
              "controller": "PipelineController",
              "control_policy": "FIFO",
              "process_ids": [
                "P1",
                "P3"
              ],
              "process_capacities": [
                2,
                2
              ],
              "state_ids": [
                "Breakdownstate_1",
                "Setup_State_3",
                "Setup_State_4"
              ],
              "input_queues": [
                "IQ2"
              ],
              "output_queues": [
                "OQ3"
              ]
            },
            {
              "ID": "TR1",
              "description": "Transport Resource 1",
              "capacity": 1,
              "location": [
                15,
                15
              ],
              "controller": "TransportController",
              "control_policy": "FIFO",
              "process_ids": [
                "TP1"
              ],
              "state_ids": [
                "Breakdownstate_1"
              ]
            },
            {
              "ID": "TR2",
              "description": "Transport Resource 2",
              "capacity": 1,
              "location": [
                15,
                20
              ],
              "controller": "TransportController",
              "control_policy": "SPT_transport",
              "process_ids": [
                "TP1"
              ],
              "state_ids": [
                "Breakdownstate_1"
              ]
            }
          ],
          "product_data": [
            {
              "ID": "Product_1",
              "description": "Product 1",
              "product_type": "Product_1",
              "processes": [
                "P1",
                "P2",
                "P3"
              ],
              "transport_process": "TP1"
            },
            {
              "ID": "Product_2",
              "description": "Product 2",
              "product_type": "Product_2",
              "processes": [
                "P1",
                "P2",
                "P3",
                "P1"
              ],
              "transport_process": "TP1"
            },
            {
              "ID": "Product_3",
              "description": "Product 3",
              "product_type": "Product_3",
              "processes": {
                "P1": [
                  "P2",
                  "P3"
                ],
                "P2": [],
                "P3": []
              },
              "transport_process": "TP1"
            }
          ],
          "sink_data": [
            {
              "ID": "SK1",
              "description": "Sink 1",
              "location": [
                50,
                50
              ],
              "product_type": "Product_1",
              "input_queues": [
                "SinkQueue"
              ]
            },
            {
              "ID": "SK2",
              "description": "Sink 2",
              "location": [
                55,
                50
              ],
              "product_type": "Product_2",
              "input_queues": [
                "SinkQueue"
              ]
            },
            {
              "ID": "SK3",
              "description": "Sink 3",
              "location": [
                45,
                50
              ],
              "product_type": "Product_3",
              "input_queues": [
                "SinkQueue"
              ]
            }
          ],
          "source_data": [
            {
              "ID": "S1",
              "description": "Source 1",
              "location": [
                0,
                0
              ],
              "product_type": "Product_1",
              "time_model_id": "function_time_model_4",
              "router": "SimpleRouter",
              "routing_heuristic": "shortest_queue",
              "output_queues": [
                "SourceQueue"
              ]
            },
            {
              "ID": "S2",
              "description": "Source 2",
              "location": [
                30,
                30
              ],
              "product_type": "Product_2",
              "time_model_id": "function_time_model_4",
              "router": "SimpleRouter",
              "routing_heuristic": "shortest_queue",
              "output_queues": [
                "SourceQueue"
              ]
            },
            {
              "ID": "S3",
              "description": "Source 3",
              "location": [
                40,
                30
              ],
              "product_type": "Product_3",
              "time_model_id": "function_time_model_4",
              "router": "SimpleRouter",
              "routing_heuristic": "shortest_queue",
              "output_queues": [
                "SourceQueue"
              ]
            }
          ]
        }
      },
      "KPIEnum": {
        "title": "KPIEnum",
        "enum": [
          "output",
          "throughput",
          "cost",
          "WIP",
          "throughput_time",
          "processing_time",
          "productive_time",
          "standby_time",
          "setup_time",
          "unscheduled_downtime",
          "dynamic_WIP",
          "dynamic_throughput_time"
        ],
        "type": "string",
        "description": "Enum that represents the different kind of KPIs."
      },
      "KPILevelEnum": {
        "title": "KPILevelEnum",
        "enum": [
          "system",
          "resource",
          "all_products",
          "product_type",
          "product",
          "process"
        ],
        "type": "string",
        "description": "Enum that represents the different kind of KPI levels."
      },
      "ManhattanDistanceTimeModelData": {
        "title": "ManhattanDistanceTimeModelData",
        "required": [
          "ID",
          "description",
          "speed",
          "reaction_time"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "speed": {
            "title": "Speed",
            "type": "number"
          },
          "reaction_time": {
            "title": "Reaction Time",
            "type": "number"
          }
        },
        "description": "Class that represents a time model that is based on the manhattan distance between two nodes and a constant velocity.\n\nArgs:\n    ID (str): ID of the time model.\n    description (str): Description of the time model.\n    speed (float): Speed of the transport.\n    reaction_time (float): Reaction time of the transport.\n\nExamples:\n    Manhattan time model with speed 180 m/min = 3 m/s and reaction time 0.15 minutes:\n    ``` py\n    import prodsys\n    time_model_data.ManhattanDistanceTimeModelData(\n        ID=\"manhattan_time_model_1\",\n        description=\"manhattan time model with speed 180 m/min = 3 m/s\",\n        speed=180.0,\n        reaction_time=0.15,\n    )",
        "example": {
          "summary": "Manhattan time model",
          "value": {
            "ID": "manhattan_time_model_1",
            "description": "manhattan time model with speed 180 m/min = 3 m/s",
            "speed": 30,
            "reaction_time": 0.15
          }
        }
      },
      "MathOptHyperparameters": {
        "title": "MathOptHyperparameters",
        "type": "object",
        "properties": {
          "optimization_time_portion": {
            "title": "Optimization Time Portion",
            "type": "number",
            "default": 0.5
          },
          "number_of_solutions": {
            "title": "Number Of Solutions",
            "type": "integer",
            "default": 1
          },
          "adjusted_number_of_transport_resources": {
            "title": "Adjusted Number Of Transport Resources",
            "type": "integer",
            "default": 1
          }
        },
        "description": "Hyperparameters for configuration optimization with mathematical optimization. For mathetical optimization, only production capacity is optimized..\nMathematical optimization is performed with Gurobi, so a valid Gurobi license is required.\n\nArgs:\n    optimization_time_portion (float): Portion of the total time that is used for optimization.\n    number_of_solutions (int): Number of solutions that are generated.\n    adjusted_number_of_transport_resources (int): Number of transport resources that are used for the optimization.",
        "example": {
          "summary": "Mathematical Optimization Hyperparameters",
          "value": {
            "optimization_time_portion": 0.5,
            "number_of_solutions": 1,
            "adjusted_number_of_transport_resources": 1
          }
        }
      },
      "Objective": {
        "title": "Objective",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/KPIEnum"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          }
        },
        "examples": {
          "cost": {
            "summary": "Cost",
            "value": {
              "name": "cost",
              "weight": 0.6
            }
          },
          "throughput": {
            "summary": "Throughput",
            "value": {
              "name": "throughput",
              "weight": 0.1
            }
          },
          "WIP": {
            "summary": "WIP",
            "value": {
              "name": "WIP",
              "weight": 0.5
            }
          }
        }
      },
      "Output": {
        "title": "Output",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "output"
            ],
            "type": "string",
            "default": "output"
          },
          "target": {
            "title": "Target",
            "enum": [
              "max"
            ],
            "type": "string",
            "default": "max"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Output KPI",
          "value": {
            "name": "output",
            "target": "max",
            "weight": 1,
            "value": 34,
            "context": [
              "system",
              "product_type"
            ],
            "product_type": "ProductType_1"
          }
        }
      },
      "ProcessBreakDownStateData": {
        "title": "ProcessBreakDownStateData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type",
          "repair_time_model_id",
          "process_id"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "ProcessBreakDownState"
            ],
            "type": "string"
          },
          "repair_time_model_id": {
            "title": "Repair Time Model Id",
            "type": "string"
          },
          "process_id": {
            "title": "Process Id",
            "type": "string"
          }
        },
        "description": "Class that represents a process breakdown state. It is a breakdown state that is connected to a process. Other processes can still be executed while the process breakdown state is activen.\n\nArgs:\n    ID (str): ID of the state.\n    description (str): Description of the state.\n    time_model_id (str): Time model ID of the state.\n    type (StateTypeEnum): Type of the state.\n    repair_time_model_id (str): Time model ID of the repair time.\n    process_id (str): ID of the process that is broken down.\n\nExamples:\n    Process breakdown state with a function time model:\n    ``` py\n    import prodsys\n    prodsys.state_data.ProcessBreakDownStateData(\n        ID=\"ProcessBreakDownState_1\",\n        description=\"Process Breakdown state machine 1\",\n        time_model_id=\"function_time_model_7\",\n        repair_time_model_id=\"function_time_model_8\",\n        process_id=\"P1\",\n    )\n    ```",
        "example": {
          "summary": "Process breakdown state",
          "value": {
            "ID": "ProcessBreakDownState_1",
            "description": "Process Breakdown state machine 1",
            "time_model_id": "function_time_model_7",
            "type": "ProcessBreakDownState",
            "process_id": "P1",
            "repair_time_model_id": "function_time_model_8"
          }
        }
      },
      "ProcessData": {
        "title": "ProcessData",
        "required": [
          "ID",
          "description",
          "time_model_id"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          }
        },
        "description": "Class that represents process data. Acts as a base class for all process data classes.\n\nArgs:\n    ID (str): ID of the process.\n    description (str): Description of the process.\n    time_model_id (str): ID of the time model of the process.",
        "example": {
          "ID": "P1",
          "description": "Process 1",
          "time_model_id": "function_time_model_1"
        }
      },
      "ProcessingTime": {
        "title": "ProcessingTime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "processing_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Processing time KPI",
          "value": {
            "name": "processing_time",
            "target": "min",
            "weight": 1,
            "value": 1.2,
            "context": [
              "resource",
              "process"
            ],
            "resource": "Resource_1",
            "process": "P1"
          }
        }
      },
      "ProductData": {
        "title": "ProductData",
        "required": [
          "ID",
          "description",
          "product_type",
          "processes",
          "transport_process"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          },
          "processes": {
            "title": "Processes",
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          "transport_process": {
            "title": "Transport Process",
            "type": "string"
          }
        },
        "description": "Class that represents product data, specifically the required processes and the allows tranport process.\n\nThe processes describe thereby the process model that needs to be completed for the product to be finished. There are three different ways to describe the process model:\n\n- Sequential process model: The processes are given as a list of process IDs. The processes are executed sequentially.\n- Adjacency matrix process model: The processes are given as an adjacency matrix that describes the precedence graph of the product.\n- Edges process model: The processes are given as a list of edges. The edges describe the precedence graph of the product.\n\nSee the examples for more insights.\n\nArgs:\n    ID (str): ID of the product. If not given, the product type is used. Gets overwritten to the instance product ID, when an instance is created during simulation. \n    description (str): Description of the product.\n    product_type (str): Type of the product. If not given, the ID is used.\n    processes (Union[List[str], List[List[str]], Dict[str, List[str]]]): Processes of the product. This can be a list of process IDs, a list of edges or an adjacency matrix.\n    transport_process (str): Transport process of the product.\n\nExamples:\n    Product with sequential process model:\n    ``` py\n    import prodsys\n    prodsys.product_data.ProductData(\n        ID=\"Product_1\",\n        description=\"product 1\",\n        product_type=\"Product_1\",\n        processes=[\"P1\", \"P2\", \"P3\"],\n        transport_process=\"TP1\",\n    )\n    ```\n\n    Product with adjacency matrix process model:\n    ``` py  \n    import prodsys\n    prodsys.product_data.ProductData(\n        ID=\"Product_1\",\n        description=\"Product 1\",\n        product_type=\"Product_1\",\n        processes={\n            \"P1\": [\"P2\", \"P3\"],\n            \"P2\": [\"P3\"],\n            \"P3\": [],\n        },\n        transport_process=\"TP1\",\n    )\n    ```\n\n    Product with graph edges process model:\n    ``` py\n    import prodsys\n    prodsys.product_data.ProductData(\n        ID=\"Product_1\",\n        description=\"Product 1\",\n        product_type=\"Product_1\",\n        processes=[\n            [\"P1\", \"P2\"],\n            [\"P1\", \"P3\"],\n            [\"P2\", \"P4\"],\n            [\"P3\", \"P4\"],\n        ],\n        transport_process=\"TP1\",\n    )\n    ```",
        "examples": {
          "Product with sequential process model": {
            "summary": "Normal Product Model with sequential processes",
            "value": {
              "ID": "Product_1",
              "description": "Product 1",
              "product_type": "Product_1",
              "processes": [
                "P1",
                "P2",
                "P3"
              ],
              "transport_process": "TP1"
            }
          },
          "Product with adjacency matrix process model": {
            "summary": "Product Model with adjacency matrix",
            "value": {
              "ID": "Product_1",
              "description": "Product 1",
              "product_type": "Product_1",
              "processes": {
                "P1": [
                  "P2",
                  "P3"
                ],
                "P2": [
                  "P3"
                ],
                "P3": []
              },
              "transport_process": "TP1"
            }
          },
          "Product with graph edges process model": {
            "summary": "Product Model with edges",
            "value": {
              "ID": "Product_1",
              "description": "Product 1",
              "product_type": "Product_1",
              "processes": [
                [
                  "P1",
                  "P2"
                ],
                [
                  "P1",
                  "P3"
                ],
                [
                  "P2",
                  "P4"
                ],
                [
                  "P3",
                  "P4"
                ]
              ],
              "transport_process": "TP1"
            }
          }
        }
      },
      "ProductionProcessData": {
        "title": "ProductionProcessData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "ProductionProcesses"
            ],
            "type": "string"
          }
        },
        "description": "Class that represents production process data.\n\nArgs:\n    ID (str): ID of the process.\n    description (str): Description of the process.\n    time_model_id (str): ID of the time model of the process.\n    type (Literal[ProcessTypeEnum.ProductionProcesses]): Type of the process.\n\nExamples:\n    A production process with ID \"P1\", description \"Process 1\" and time model ID \"function_time_model_1\":\n    ``` py\n    import prodsys\n    prodsys.processes_data.ProductionProcessData(\n        ID=\"P1\",\n        description=\"Process 1\",\n        time_model_id=\"function_time_model_1\",\n        type=\"ProductionProcesses\",\n    )\n    ```",
        "example": {
          "summary": "Production process",
          "value": {
            "ID": "P1",
            "description": "Process 1",
            "time_model_id": "function_time_model_1",
            "type": "ProductionProcesses"
          }
        }
      },
      "ProductionResourceData": {
        "title": "ProductionResourceData",
        "required": [
          "ID",
          "description",
          "capacity",
          "location",
          "controller",
          "control_policy",
          "process_ids"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "capacity": {
            "title": "Capacity",
            "type": "integer"
          },
          "location": {
            "title": "Location",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "controller": {
            "title": "Controller",
            "enum": [
              "PipelineController"
            ],
            "type": "string"
          },
          "control_policy": {
            "$ref": "#/components/schemas/ResourceControlPolicy"
          },
          "process_ids": {
            "title": "Process Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "process_capacities": {
            "title": "Process Capacities",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "state_ids": {
            "title": "State Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "input_queues": {
            "title": "Input Queues",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "output_queues": {
            "title": "Output Queues",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Class that represents production resource data.\n\nArgs:\n    ID (str): ID of the resource.\n    description (str): Description of the resource.\n    capacity (int): Capacity of the resource.\n    location (List[float]): Location of the resource. Has to be a list of length 2.\n    controller (Literal[ControllerEnum.PipelineController]): Controller of the resource, has to be a PipelineController.\n    control_policy (ResourceControlPolicy): Control policy of the resource.\n    process_ids (List[str]): Process IDs of the resource.\n    process_capacities (Optional[List[int]], optional): Process capacities of the resource. Defaults to None.\n    state_ids (Optional[List[str]], optional): State IDs of the resource. Defaults to [].\n    input_queues (Optional[List[str]], optional): Input queues of the resource. Defaults to None.\n    output_queues (Optional[List[str]], optional): Output queues of the resource. Defaults to None.\n\nExamples:\n    Creation of a production resource with a capacity of 2, a location of [10.0, 10.0], a PipelineController and a FIFO control policy:\n    ```py\n    import prodsys\n    prodsys.resource_data.ProductionResourceData(\n        ID=\"R1\",\n        description=\"Resource 1\",\n        capacity=2,\n        location=[10.0, 10.0],\n        controller=prodsys.resource_data.ControllerEnum.PipelineController,\n        control_policy=prodsys.resource_data.ResourceControlPolicy.FIFO,\n        process_ids=[\"P1\", \"P2\"],\n        process_capacities=[2, 1],\n        states=[\n            \"Breakdownstate_1\",\n            \"Setup_State_1\",\n        ],\n        input_queues=[\"IQ1\"],\n        output_queues=[\"OQ1\"],\n    )\n    ```",
        "example": {
          "summary": "Production Resource Data",
          "value": {
            "ID": "R1",
            "description": "Resource 1",
            "capacity": 2,
            "location": [
              10,
              10
            ],
            "controller": "PipelineController",
            "control_policy": "FIFO",
            "process_ids": [
              "P1",
              "P2"
            ],
            "process_capacities": [
              2,
              1
            ],
            "states": [
              "Breakdownstate_1",
              "Setup_State_1",
              "Setup_State_2",
              "ProcessBreakdownState_1"
            ],
            "input_queues": [
              "IQ1"
            ],
            "output_queues": [
              "OQ1"
            ]
          }
        }
      },
      "ProductionStateData": {
        "title": "ProductionStateData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "ProductionState"
            ],
            "type": "string"
          }
        },
        "description": "Class that represents a production state. By undergoing a production state, the product is processed and continues its process model. Production states don't have to be initialized because they are automatically created when a process is added to a resource.\n\nArgs:\n    ID (str): ID of the state.\n    description (str): Description of the state.\n    time_model_id (str): Time model ID of the state.\n    type (StateTypeEnum): Type of the state.",
        "example": {
          "summary": "Production state",
          "value": {
            "ID": "ProductionState_1",
            "description": "Production state machine 1",
            "time_model_id": "function_time_model_1",
            "type": "ProductionState"
          }
        }
      },
      "ProductiveTime": {
        "title": "ProductiveTime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "productive_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "max"
            ],
            "type": "string",
            "default": "max"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Productive time KPI",
          "value": {
            "name": "productive_time",
            "target": "max",
            "weight": 1,
            "value": 0.65,
            "context": [
              "resource"
            ],
            "resource": "Resource_1"
          }
        }
      },
      "Project": {
        "title": "Project",
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "adapters": {
            "title": "Adapters",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonProductionSystemAdapter"
            },
            "default": {}
          }
        },
        "example": {
          "ID": "Example Project",
          "adapters": {
            "Example Adapter": {
              "ID": "",
              "valid_configuration": true,
              "reconfiguration_cost": 0,
              "seed": 24,
              "time_model_data": [
                {
                  "ID": "function_time_model_1",
                  "description": "normal distribution time model with 20 minutes",
                  "distribution_function": "normal",
                  "location": 14.3,
                  "scale": 5,
                  "batch_size": 100
                },
                {
                  "ID": "function_time_model_2",
                  "description": "constant distribution time model with 10 minutes",
                  "distribution_function": "constant",
                  "location": 15,
                  "scale": 0,
                  "batch_size": 100
                },
                {
                  "ID": "function_time_model_3",
                  "description": "normal distribution time model with 20 minutes",
                  "distribution_function": "normal",
                  "location": 20,
                  "scale": 5,
                  "batch_size": 100
                },
                {
                  "ID": "function_time_model_4",
                  "description": "exponential distribution time model with 100 minutes",
                  "distribution_function": "exponential",
                  "location": 52,
                  "scale": 0,
                  "batch_size": 100
                },
                {
                  "ID": "function_time_model_5",
                  "description": "exponential distribution time model with 150 minutes",
                  "distribution_function": "exponential",
                  "location": 150,
                  "scale": 0,
                  "batch_size": 100
                },
                {
                  "ID": "sequential_time_model_1",
                  "description": "Sequential time model",
                  "sequence": [
                    25,
                    13,
                    15,
                    16,
                    17,
                    20,
                    21
                  ]
                },
                {
                  "ID": "manhattan_time_model_1",
                  "description": "manhattan time model with speed 180 m/min = 3 m/s",
                  "speed": 30,
                  "reaction_time": 0.15
                },
                {
                  "ID": "function_time_model_7",
                  "description": "exponential distribution time model with 300 minutes",
                  "distribution_function": "exponential",
                  "location": 300,
                  "scale": 0,
                  "batch_size": 100
                },
                {
                  "ID": "function_time_model_8",
                  "description": "normal distribution time model with 15 minutes",
                  "distribution_function": "normal",
                  "location": 15,
                  "scale": 3,
                  "batch_size": 100
                }
              ],
              "state_data": [
                {
                  "ID": "Breakdownstate_1",
                  "description": "Breakdown state machine 1",
                  "time_model_id": "function_time_model_5",
                  "type": "BreakDownState",
                  "repair_time_model_id": "function_time_model_8"
                },
                {
                  "ID": "Breakdownstate_2",
                  "description": "Breakdown state machine 2",
                  "time_model_id": "function_time_model_5",
                  "type": "BreakDownState",
                  "repair_time_model_id": "function_time_model_8"
                },
                {
                  "ID": "Setup_State_1",
                  "description": "Setup state machine 1",
                  "time_model_id": "function_time_model_2",
                  "type": "SetupState",
                  "origin_setup": "P1",
                  "target_setup": "P2"
                },
                {
                  "ID": "Setup_State_2",
                  "description": "Setup state machine 2",
                  "time_model_id": "function_time_model_2",
                  "type": "SetupState",
                  "origin_setup": "P2",
                  "target_setup": "P1"
                },
                {
                  "ID": "Setup_State_3",
                  "description": "Setup state machine 3",
                  "time_model_id": "function_time_model_2",
                  "type": "SetupState",
                  "origin_setup": "P1",
                  "target_setup": "P3"
                },
                {
                  "ID": "Setup_State_4",
                  "description": "Setup state machine 3",
                  "time_model_id": "function_time_model_3",
                  "type": "SetupState",
                  "origin_setup": "P3",
                  "target_setup": "P1"
                },
                {
                  "ID": "ProcessBreakdownState_1",
                  "description": "Breakdown state process 1",
                  "time_model_id": "function_time_model_7",
                  "type": "ProcessBreakDownState",
                  "repair_time_model_id": "function_time_model_8",
                  "process_id": "P1"
                }
              ],
              "process_data": [
                {
                  "ID": "P1",
                  "description": "Process 1",
                  "time_model_id": "function_time_model_1",
                  "type": "ProductionProcesses"
                },
                {
                  "ID": "P2",
                  "description": "Process 2",
                  "time_model_id": "function_time_model_2",
                  "type": "ProductionProcesses"
                },
                {
                  "ID": "P3",
                  "description": "Process 3",
                  "time_model_id": "function_time_model_3",
                  "type": "ProductionProcesses"
                },
                {
                  "ID": "TP1",
                  "description": "Transport Process 1",
                  "time_model_id": "manhattan_time_model_1",
                  "type": "TransportProcesses"
                }
              ],
              "queue_data": [
                {
                  "ID": "IQ1",
                  "description": "Input-queue 1 for R1",
                  "capacity": 10
                },
                {
                  "ID": "OQ1",
                  "description": "Output-queue 1 for R1",
                  "capacity": 10
                },
                {
                  "ID": "OQ2",
                  "description": "Output-queue 2 for R2",
                  "capacity": 10
                },
                {
                  "ID": "IQ2",
                  "description": "Input-queue 2 for R3",
                  "capacity": 10
                },
                {
                  "ID": "OQ3",
                  "description": "Output-queue 3 for R3",
                  "capacity": 10
                },
                {
                  "ID": "SourceQueue",
                  "description": "Output-Queue for all sources",
                  "capacity": 0
                },
                {
                  "ID": "SinkQueue",
                  "description": "Input-Queue for all sinks",
                  "capacity": 0
                },
                {
                  "ID": "IQ9",
                  "description": "Input-queue 1 for R2",
                  "capacity": 10
                }
              ],
              "resource_data": [
                {
                  "ID": "R1",
                  "description": "Resource 1",
                  "capacity": 2,
                  "location": [
                    10,
                    10
                  ],
                  "controller": "PipelineController",
                  "control_policy": "FIFO",
                  "process_ids": [
                    "P1",
                    "P2"
                  ],
                  "process_capacities": [
                    2,
                    1
                  ],
                  "state_ids": [
                    "Breakdownstate_1",
                    "Setup_State_1",
                    "Setup_State_2",
                    "ProcessBreakdownState_1"
                  ],
                  "input_queues": [
                    "IQ1"
                  ],
                  "output_queues": [
                    "OQ1"
                  ]
                },
                {
                  "ID": "R2",
                  "description": "Resource 2",
                  "capacity": 1,
                  "location": [
                    20,
                    10
                  ],
                  "controller": "PipelineController",
                  "control_policy": "FIFO",
                  "process_ids": [
                    "P2",
                    "P3"
                  ],
                  "state_ids": [
                    "Breakdownstate_2"
                  ],
                  "input_queues": [
                    "IQ9"
                  ],
                  "output_queues": [
                    "OQ2"
                  ]
                },
                {
                  "ID": "R3",
                  "description": "Resource 3",
                  "capacity": 2,
                  "location": [
                    20,
                    20
                  ],
                  "controller": "PipelineController",
                  "control_policy": "FIFO",
                  "process_ids": [
                    "P1",
                    "P3"
                  ],
                  "process_capacities": [
                    1,
                    2
                  ],
                  "state_ids": [
                    "Breakdownstate_1",
                    "Breakdownstate_2",
                    "Setup_State_3",
                    "Setup_State_4"
                  ],
                  "input_queues": [
                    "IQ2"
                  ],
                  "output_queues": [
                    "OQ3"
                  ]
                },
                {
                  "ID": "R4",
                  "description": "Resource 3",
                  "capacity": 2,
                  "location": [
                    10,
                    20
                  ],
                  "controller": "PipelineController",
                  "control_policy": "FIFO",
                  "process_ids": [
                    "P1",
                    "P3"
                  ],
                  "process_capacities": [
                    2,
                    2
                  ],
                  "state_ids": [
                    "Breakdownstate_1",
                    "Setup_State_3",
                    "Setup_State_4"
                  ],
                  "input_queues": [
                    "IQ2"
                  ],
                  "output_queues": [
                    "OQ3"
                  ]
                },
                {
                  "ID": "TR1",
                  "description": "Transport Resource 1",
                  "capacity": 1,
                  "location": [
                    15,
                    15
                  ],
                  "controller": "TransportController",
                  "control_policy": "FIFO",
                  "process_ids": [
                    "TP1"
                  ],
                  "state_ids": [
                    "Breakdownstate_1"
                  ]
                },
                {
                  "ID": "TR2",
                  "description": "Transport Resource 2",
                  "capacity": 1,
                  "location": [
                    15,
                    20
                  ],
                  "controller": "TransportController",
                  "control_policy": "SPT_transport",
                  "process_ids": [
                    "TP1"
                  ],
                  "state_ids": [
                    "Breakdownstate_1"
                  ]
                }
              ],
              "product_data": [
                {
                  "ID": "Product_1",
                  "description": "Product 1",
                  "product_type": "Product_1",
                  "processes": [
                    "P1",
                    "P2",
                    "P3"
                  ],
                  "transport_process": "TP1"
                },
                {
                  "ID": "Product_2",
                  "description": "Product 2",
                  "product_type": "Product_2",
                  "processes": [
                    "P1",
                    "P2",
                    "P3",
                    "P1"
                  ],
                  "transport_process": "TP1"
                },
                {
                  "ID": "Product_3",
                  "description": "Product 3",
                  "product_type": "Product_3",
                  "processes": {
                    "P1": [
                      "P2",
                      "P3"
                    ],
                    "P2": [],
                    "P3": []
                  },
                  "transport_process": "TP1"
                }
              ],
              "sink_data": [
                {
                  "ID": "SK1",
                  "description": "Sink 1",
                  "location": [
                    50,
                    50
                  ],
                  "product_type": "Product_1",
                  "input_queues": [
                    "SinkQueue"
                  ]
                },
                {
                  "ID": "SK2",
                  "description": "Sink 2",
                  "location": [
                    55,
                    50
                  ],
                  "product_type": "Product_2",
                  "input_queues": [
                    "SinkQueue"
                  ]
                },
                {
                  "ID": "SK3",
                  "description": "Sink 3",
                  "location": [
                    45,
                    50
                  ],
                  "product_type": "Product_3",
                  "input_queues": [
                    "SinkQueue"
                  ]
                }
              ],
              "source_data": [
                {
                  "ID": "S1",
                  "description": "Source 1",
                  "location": [
                    0,
                    0
                  ],
                  "product_type": "Product_1",
                  "time_model_id": "function_time_model_4",
                  "router": "SimpleRouter",
                  "routing_heuristic": "shortest_queue",
                  "output_queues": [
                    "SourceQueue"
                  ]
                },
                {
                  "ID": "S2",
                  "description": "Source 2",
                  "location": [
                    30,
                    30
                  ],
                  "product_type": "Product_2",
                  "time_model_id": "function_time_model_4",
                  "router": "SimpleRouter",
                  "routing_heuristic": "shortest_queue",
                  "output_queues": [
                    "SourceQueue"
                  ]
                },
                {
                  "ID": "S3",
                  "description": "Source 3",
                  "location": [
                    40,
                    30
                  ],
                  "product_type": "Product_3",
                  "time_model_id": "function_time_model_4",
                  "router": "SimpleRouter",
                  "routing_heuristic": "shortest_queue",
                  "output_queues": [
                    "SourceQueue"
                  ]
                }
              ]
            }
          }
        }
      },
      "QueueData": {
        "title": "QueueData",
        "required": [
          "ID",
          "description"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "capacity": {
            "title": "Capacity",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "default": 0
          }
        },
        "description": "Class that represents a queue. If capacity is 0, the queue is considered infinite. Otherwise, the queue can hold a finite number of products cooresponding to the capacity.\n\nArgs:\n    ID (str): ID of the queue.\n    description (str): Description of the queue.\n    capacity (Union[int, float]): Capacity of the queue. If 0, the queue is considered infinite. Otherwise, the queue can hold a finite number of products cooresponding to the capacity.\n\nExamples:\n    A finite queue with ID \"Q1\", description \"Queue 1\" and capacity 10:\n    ``` py\n    import prodsys\n    prodsys.queue_data.QueueData(\n        ID=\"Q1\",\n        description=\"Queue 1\",\n        capacity=10,\n    )\n    ```\n    An infinite queue with ID \"Q1\", description \"Queue 1\" and capacity 0:\n    ``` py\n    import prodsys\n    prodsys.queue_data.QueueData(\n        ID=\"Q1\",\n        description=\"Queue 1\",\n        capacity=0,\n    )\n    ```",
        "examples": {
          "Finite Queue": {
            "summary": "Finite Queue",
            "value": {
              "ID": "Q1",
              "description": "Queue 1",
              "capacity": 10
            }
          },
          "Infinite Queue": {
            "summary": "Infinite Queue",
            "value": {
              "ID": "Q1",
              "description": "Queue 1",
              "capacity": 0
            }
          }
        }
      },
      "ReconfigurationEnum": {
        "title": "ReconfigurationEnum",
        "enum": [
          "production_capacity",
          "transport_capacity",
          "layout",
          "sequencing_logic",
          "routing_logic"
        ],
        "type": "string",
        "description": "Enum that represents the different levels of reconfigurations that are possible.\n\n- ProductionCapacity: Reconfiguration of production capacity (number of machines and their configuration)\n- TransportCapacity: Reconfiguration of transport capacity (number of transport resources and their configuration)\n- Layout: Reconfiguration of layout (only position of resources)\n- SequencingLogic: Reconfiguration of sequencing logic (only the control policy of resources)\n- RoutingLogic: Reconfiguration of routing logic (only the routing heuristic of routers)"
      },
      "ResourceControlPolicy": {
        "title": "ResourceControlPolicy",
        "enum": [
          "FIFO",
          "LIFO",
          "SPT"
        ],
        "type": "string",
        "description": "Enum that represents the control policy of a resource.\n\n- FIFO: First in first out.\n- LIFO: Last in first out.\n- SPT: Shortest processing time first."
      },
      "RouterType": {
        "title": "RouterType",
        "enum": [
          "SimpleRouter",
          "CapabilityRouter"
        ],
        "type": "string",
        "description": "Enum that represents the router type of a source.\n\n- SimpleRouter: Simple router routes the product to resources based on IDs of resources.\n- CapabilityRouter: Capability router routes the product to resources based on capabilites of processes."
      },
      "RoutingHeuristic": {
        "title": "RoutingHeuristic",
        "enum": [
          "random",
          "shortest_queue",
          "FIFO"
        ],
        "type": "string",
        "description": "Enum that represents the routing heuristic of a source."
      },
      "ScenarioConstrainsData": {
        "title": "ScenarioConstrainsData",
        "required": [
          "max_reconfiguration_cost",
          "max_num_machines",
          "max_num_processes_per_machine",
          "max_num_transport_resources"
        ],
        "type": "object",
        "properties": {
          "max_reconfiguration_cost": {
            "title": "Max Reconfiguration Cost",
            "type": "number"
          },
          "max_num_machines": {
            "title": "Max Num Machines",
            "type": "integer"
          },
          "max_num_processes_per_machine": {
            "title": "Max Num Processes Per Machine",
            "type": "integer"
          },
          "max_num_transport_resources": {
            "title": "Max Num Transport Resources",
            "type": "integer"
          },
          "target_product_count": {
            "title": "Target Product Count",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "description": "Class that represents the constraints of a scenario. The maximum limitations aim to limit the complexity of the\nscenario, thus optimization is possible in a reasonable time. However, by setting only a few constraints, the\ncomplexity of the scenario can be increased. E.g. you set the maximum reconfiguration cost to the targeted value and\nmaximum numbers very high. Thereby, the optimization problem is only constrained by reconfiguration cost and not other\nfactors.\n\nArgs:\n    max_reconfiguration_cost (float): Maximum reconfiguration cost that can be spend for new production capacity in the scenario.\n    max_num_machines (int): Maximum number of machines that can be used in the scenario.\n    max_num_processes_per_machine (int): Maximum number of processes that can be assigned to a machine in the scenario.\n    max_num_transport_resources (int): Maximum number of transport resources that can be used in the scenario.\n    target_product_count (Optional[Dict[str, int]], optional): Target product count for the scenario. Defaults to None. Mapping of product type to target count in the considered time range of the scenario.",
        "example": {
          "summary": "Scenario constraints",
          "value": {
            "max_reconfiguration_cost": 120000,
            "max_num_machines": 10,
            "max_num_processes_per_machine": 2,
            "max_num_transport_resources": 2,
            "target_product_count": {
              "Product_1": 120,
              "Product_2": 200
            }
          }
        }
      },
      "ScenarioData": {
        "title": "ScenarioData",
        "required": [
          "constraints",
          "options",
          "info",
          "objectives"
        ],
        "type": "object",
        "properties": {
          "constraints": {
            "$ref": "#/components/schemas/ScenarioConstrainsData"
          },
          "options": {
            "$ref": "#/components/schemas/ScenarioOptionsData"
          },
          "info": {
            "$ref": "#/components/schemas/ScenarioInfoData"
          },
          "objectives": {
            "title": "Objectives",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Objective"
            }
          }
        },
        "description": "Class that represents a scenario and contraints data about constaints, options, information and objectives of the scenario.\n\nArgs:\n    constraints (ScenarioConstrainsData): Constraints of the scenario.\n    options (ScenarioOptionsData): Options of the scenario.\n    info (ScenarioInfoData): Information of the scenario.\n    optimize (List[Objectives]): List of KPIs that should be optimized.\n\nRaises:\n    ValueError: If the weights are not specified for all KPIs that should be optimized.",
        "example": {
          "summary": "Scenario",
          "value": {
            "constraints": {
              "max_reconfiguration_cost": 120000,
              "max_num_machines": 10,
              "max_num_processes_per_machine": 2,
              "max_num_transport_resources": 2,
              "target_product_count": {
                "Product_1": 120,
                "Product_2": 200
              }
            },
            "options": {
              "transformations": [
                "production_capacity",
                "transport_capacity",
                "layout",
                "sequencing_logic",
                "routing_logic"
              ],
              "machine_controllers": [
                "FIFO",
                "LIFO",
                "SPT"
              ],
              "transport_controllers": [
                "FIFO",
                "SPT_transport"
              ],
              "routing_heuristics": [
                "shortest_queue",
                "random",
                "FIFO"
              ],
              "positions": [
                [
                  10,
                  10
                ],
                [
                  20,
                  20
                ]
              ]
            },
            "info": {
              "machine_cost": 30000,
              "transport_resource_cost": 20000,
              "process_module_cost": 2300,
              "breakdown_cost": 1000,
              "time_range": 2600,
              "maximum_breakdown_time": 10
            },
            "objectives": [
              {
                "name": "cost",
                "weight": 0.6
              },
              {
                "name": "throughput",
                "weight": 0.1
              },
              {
                "name": "WIP",
                "weight": 0.5
              }
            ]
          }
        }
      },
      "ScenarioInfoData": {
        "title": "ScenarioInfoData",
        "required": [
          "machine_cost",
          "transport_resource_cost",
          "process_module_cost"
        ],
        "type": "object",
        "properties": {
          "machine_cost": {
            "title": "Machine Cost",
            "type": "number"
          },
          "transport_resource_cost": {
            "title": "Transport Resource Cost",
            "type": "number"
          },
          "process_module_cost": {
            "title": "Process Module Cost",
            "type": "number"
          },
          "breakdown_cost": {
            "title": "Breakdown Cost",
            "type": "number"
          },
          "time_range": {
            "title": "Time Range",
            "type": "integer"
          },
          "maximum_breakdown_time": {
            "title": "Maximum Breakdown Time",
            "type": "integer"
          }
        },
        "description": "Class that represents the information of a scenario. The information is used to define some parameters that allow\nevaluation of the scenario.\n\nArgs:\n    machine_cost (float): Cost of a machine.\n    transport_resource_cost (float): Cost of a transport resource.\n    process_module_cost (float): Cost of a process module.\n    breakdown_cost (Optional[float], optional): Cost of a breakdown. Defaults to None.\n    time_range (Optional[int], optional): Time range of the scenario in minutes to be considered. Defaults to None.\n    maximum_breakdown_time (Optional[int], optional): Maximum allowable breakdown time in the scenario in minutes. Defaults to None.",
        "example": {
          "summary": "Scenario information",
          "value": {
            "machine_cost": 30000,
            "transport_resource_cost": 20000,
            "process_module_cost": 2300,
            "breakdown_cost": 1000,
            "time_range": 2600,
            "maximum_breakdown_time": 10
          }
        }
      },
      "ScenarioOptionsData": {
        "title": "ScenarioOptionsData",
        "required": [
          "transformations",
          "machine_controllers",
          "transport_controllers",
          "routing_heuristics",
          "positions"
        ],
        "type": "object",
        "properties": {
          "transformations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconfigurationEnum"
            }
          },
          "machine_controllers": {
            "title": "Machine Controllers",
            "type": "array",
            "items": {
              "enum": [
                "FIFO",
                "LIFO",
                "SPT"
              ],
              "type": "string"
            }
          },
          "transport_controllers": {
            "title": "Transport Controllers",
            "type": "array",
            "items": {
              "enum": [
                "FIFO",
                "SPT_transport"
              ],
              "type": "string"
            }
          },
          "routing_heuristics": {
            "title": "Routing Heuristics",
            "type": "array",
            "items": {
              "enum": [
                "shortest_queue",
                "random",
                "FIFO"
              ],
              "type": "string"
            }
          },
          "positions": {
            "title": "Positions",
            "type": "array",
            "items": {
              "maxItems": 2,
              "minItems": 2,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "description": "Class that represents the options of a scenario. The options are used to define the deegrees of freedom in the\noptimization scenario, i.e. the different possibilities to adjust the configuration to find a solution with higher\nperformance. Options consider possible transformations of the configuration, possible logics of controllers and routers\nand possible positions of machines in the layout.\n\nArgs:\n    transformations (List[ReconfigurationEnum]): List of possible transformations of the configuration.\n    machine_controllers (List[Literal[\"FIFO\", \"LIFO\", \"SPT\"]]): List of possible controllers for machines.\n    transport_controllers (List[Literal[\"FIFO\", \"SPT_transport\"]]): List of possible controllers for transport resources.\n    routing_heuristics (List[Literal[\"shortest_queue\", \"random\", \"FIFO\"]]): List of possible routing heuristics for sources.\n    positions (List[conlist(float, min_items=2, max_items=2)]): List of possible positions for machines in the layout.\n\nRaises:\n    ValueError: If the positions are not a list of tuples of length 2.",
        "example": {
          "summary": "Scenario options",
          "value": {
            "machine_controllers": [
              "FIFO",
              "LIFO",
              "SPT"
            ],
            "transport_controllers": [
              "FIFO",
              "SPT_transport"
            ],
            "routing_heuristics": [
              "shortest_queue",
              "random",
              "FIFO"
            ],
            "positions": [
              [
                10,
                10
              ],
              [
                20,
                20
              ]
            ]
          }
        }
      },
      "SequentialTimeModelData": {
        "title": "SequentialTimeModelData",
        "required": [
          "ID",
          "description",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "sequence": {
            "title": "Sequence",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "description": "Class that represents a time model that is based on a sequence of values.\n\nArgs:\n    ID (str): ID of the time model.\n    description (str): Description of the time model.\n    sequence (List[float]): Sequence of time values.\n\nExamples:\n    Sequential time model with 7 time values:\n    ```     py\n    import prodsys\n    prodsys.time_model_data.SequentialTimeModelData(\n        ID=\"sequence_time_model_1\",\n        description=\"Examplary sequence time model\",\n        sequence=[25.0, 13.0, 15.0, 16.0, 17.0, 20.0, 21.0],\n    )\n    ```",
        "example": {
          "summary": "Sequential time model",
          "value": {
            "ID": "sequence_time_model_1",
            "description": "Examplary sequence time model",
            "sequence": [
              25,
              13,
              15,
              16,
              17,
              20,
              21
            ]
          }
        }
      },
      "SetupStateData": {
        "title": "SetupStateData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type",
          "origin_setup",
          "target_setup"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "SetupState"
            ],
            "type": "string"
          },
          "origin_setup": {
            "title": "Origin Setup",
            "type": "string"
          },
          "target_setup": {
            "title": "Target Setup",
            "type": "string"
          }
        },
        "description": "Class that represents a setup state. By undergoing a setup state, the process is setup.\n\nArgs:\n    ID (str): ID of the state.\n    description (str): Description of the state.\n    time_model_id (str): Time model ID of the state.\n    type (StateTypeEnum): Type of the state.\n    origin_setup (str): ID of the origin process for the setup.\n    target_setup (str): ID of the target process for the setup.\n\nExamples:\n    Setup state with a function time model:\n    ``` py\n    import prodsys\n    prodsys.state_data.SetupStateData(\n        ID=\"Setup_State_2\",\n        description=\"Setup state machine 2\",\n        time_model_id=\"function_time_model_2\",\n        origin_setup=\"P2\",\n        target_setup=\"P1\",\n    )\n    ```",
        "example": {
          "summary": "Setup state",
          "value": {
            "ID": "Setup_State_2",
            "description": "Setup state machine 2",
            "time_model_id": "function_time_model_2",
            "type": "SetupState",
            "origin_setup": "P2",
            "target_setup": "P1"
          }
        }
      },
      "SetupTime": {
        "title": "SetupTime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "setup_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Setup time KPI",
          "value": {
            "name": "setup_time",
            "target": "min",
            "weight": 1,
            "value": 0.08,
            "context": [
              "resource"
            ],
            "resource": "Resource_1"
          }
        }
      },
      "SimulatedAnnealingHyperparameters": {
        "title": "SimulatedAnnealingHyperparameters",
        "type": "object",
        "properties": {
          "seed": {
            "title": "Seed",
            "type": "integer",
            "default": 0
          },
          "Tmax": {
            "title": "Tmax",
            "type": "integer",
            "default": 10000
          },
          "Tmin": {
            "title": "Tmin",
            "type": "integer",
            "default": 1
          },
          "steps": {
            "title": "Steps",
            "type": "integer",
            "default": 4000
          },
          "updates": {
            "title": "Updates",
            "type": "integer",
            "default": 300
          }
        },
        "description": "Hyperparameters to perform a configuration optimization with simulated annealing.\nArgs:\n    seed (int): Seed for random number generator\n    Tmax (int): Maximum temperature\n    Tmin (int): Minimum temperature\n    steps (int): Number of steps\n    updates (int): Number of updates",
        "example": {
          "summary": "Simulated Annealing Hyperparameters",
          "value": {
            "seed": 0,
            "Tmax": 10000,
            "Tmin": 1,
            "steps": 4000,
            "updates": 300
          }
        }
      },
      "SinkData": {
        "title": "SinkData",
        "required": [
          "ID",
          "description",
          "location",
          "product_type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          },
          "input_queues": {
            "title": "Input Queues",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Class that represents a sink.\n\nArgs:\n    ID (str): ID of the sink.\n    description (str): Description of the sink.\n    location (List[float]): Location of the sink. It has to be a list of length 2.\n    product_type (str): Product type of the sink.\n    input_queues (Optional[List[str]], optional): List of input queues of the sink. Defaults to None.\n\nExamples:\n    A sink with ID \"SK1\":\n    ``` py\n    import prodsys\n    prodsys.sink_data.SinkData(\n        ID=\"SK1\",\n        description=\"Sink 1\",\n        location=[50.0, 50.0],\n        product_type=\"Product_1\",\n        input_queues=[\"SinkQueue\"],\n    )\n    ```",
        "example": {
          "summary": "Sink",
          "value": {
            "ID": "SK1",
            "description": "Sink 1",
            "location": [
              50,
              50
            ],
            "product_type": "Product_1",
            "input_queues": [
              "SinkQueue"
            ]
          }
        }
      },
      "SourceData": {
        "title": "SourceData",
        "required": [
          "ID",
          "description",
          "location",
          "product_type",
          "time_model_id",
          "router",
          "routing_heuristic"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "router": {
            "$ref": "#/components/schemas/RouterType"
          },
          "routing_heuristic": {
            "$ref": "#/components/schemas/RoutingHeuristic"
          },
          "output_queues": {
            "title": "Output Queues",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Class that represents a source.\n\nArgs:\n    ID (str): ID of the source.\n    description (str): Description of the source.\n    location (List[float]): Location of the source. It has to be a list of length 2.\n    product_type (str): Product type of the source.\n    time_model_id (str): Time model ID of the source.\n    router (RouterType): Router of the source.\n    routing_heuristic (RoutingHeuristic): Routing heuristic of the source.\n    output_queues (Optional[List[str]], optional): List of output queues of the source. Defaults to None.\n\nExamples:\n    A source with ID \"S1\":\n    ``` py\n    import prodsys\n    prodsys.source_data.SourceData(\n        ID=\"S1\",\n        description=\"Source 1\",\n        location=[0.0, 0.0],\n        product_type=\"Product_1\",\n        time_model_id=\"function_time_model_4\",\n        router=\"SimpleRouter\",\n        routing_heuristic=\"shortest_queue\",\n        output_queues=[\"SourceQueue\"],\n    )",
        "example": {
          "summary": "Source",
          "value": {
            "ID": "S1",
            "description": "Source 1",
            "location": [
              0,
              0
            ],
            "product_type": "Product_1",
            "time_model_id": "function_time_model_4",
            "router": "SimpleRouter",
            "routing_heuristic": "shortest_queue",
            "output_queues": [
              "SourceQueue"
            ]
          }
        }
      },
      "StandbyTime": {
        "title": "StandbyTime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "standby_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Standby time KPI",
          "value": {
            "name": "standby_time",
            "target": "min",
            "weight": 1,
            "value": 0.12,
            "context": [
              "resource"
            ],
            "resource": "Resource_1"
          }
        }
      },
      "TabuSearchHyperparameters": {
        "title": "TabuSearchHyperparameters",
        "type": "object",
        "properties": {
          "seed": {
            "title": "Seed",
            "type": "integer",
            "default": 0
          },
          "tabu_size": {
            "title": "Tabu Size",
            "type": "integer",
            "default": 10
          },
          "max_steps": {
            "title": "Max Steps",
            "type": "integer",
            "default": 300
          },
          "max_score": {
            "title": "Max Score",
            "type": "number",
            "default": 500
          }
        },
        "description": "Hyperparameters for configuration optimization with tabu search.\n\n\nArgs:\n    seed (int): Seed for random number generator\n    tabu_size (int): Size of tabu list\n    max_steps (int): Maximum number of steps\n    max_score (float): Maximum score",
        "example": {
          "summary": "Tabu Search Hyperparameters",
          "value": {
            "seed": 0,
            "tabu_size": 10,
            "max_steps": 300,
            "max_score": 500
          }
        }
      },
      "Throughput": {
        "title": "Throughput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "throughput"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "max"
            ],
            "type": "string",
            "default": "max"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Throughput KPI",
          "value": {
            "name": "throughput",
            "target": "max",
            "weight": 1,
            "value": 4.32,
            "context": [
              "system",
              "product_type"
            ],
            "product_type": "ProductType_1"
          }
        }
      },
      "ThroughputTime": {
        "title": "ThroughputTime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "throughput_time"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Throughput time KPI",
          "value": {
            "name": "throughput_time",
            "target": "min",
            "weight": 1,
            "value": 221.1,
            "context": [
              "system",
              "product_type"
            ],
            "product_type": "ProductType_1"
          }
        }
      },
      "TransportControlPolicy": {
        "title": "TransportControlPolicy",
        "enum": [
          "FIFO",
          "SPT_transport"
        ],
        "type": "string",
        "description": "Enum that represents the control policy of a transport resource.\n\n- FIFO: First in first out.\n- SPT_transport: Shortest transport time first."
      },
      "TransportProcessData": {
        "title": "TransportProcessData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "TransportProcesses"
            ],
            "type": "string"
          }
        },
        "description": "Class that represents transport process data.\n\nArgs:\n    ID (str): ID of the process.\n    description (str): Description of the process.\n    time_model_id (str): ID of the time model of the process\n    type (Literal[ProcessTypeEnum.TransportProcesses]): Type of the process.\n\nExamples:\n    A transport process with ID \"TP1\", description \"Transport Process 1\" and time model ID \"manhattan_time_model_1\":\n    ``` py\n    import prodsys\n    prodsys.processes_data.TransportProcessData(\n        ID=\"TP1\",\n        description=\"Transport Process 1\",\n        time_model_id=\"manhattan_time_model_1\",\n        type=\"TransportProcesses\",\n    )\n    ```",
        "example": {
          "summary": "Transport process",
          "value": {
            "ID": "TP1",
            "description": "Transport Process 1",
            "time_model_id": "manhattan_time_model_1",
            "type": "TransportProcesses"
          }
        }
      },
      "TransportResourceData": {
        "title": "TransportResourceData",
        "required": [
          "ID",
          "description",
          "capacity",
          "location",
          "controller",
          "control_policy",
          "process_ids"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "capacity": {
            "title": "Capacity",
            "type": "integer"
          },
          "location": {
            "title": "Location",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "controller": {
            "title": "Controller",
            "enum": [
              "TransportController"
            ],
            "type": "string"
          },
          "control_policy": {
            "$ref": "#/components/schemas/TransportControlPolicy"
          },
          "process_ids": {
            "title": "Process Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "process_capacities": {
            "title": "Process Capacities",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "state_ids": {
            "title": "State Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        },
        "description": "Class that represents transport resource data.\n\nArgs:\n    ID (str): ID of the resource.\n    description (str): Description of the resource.\n    capacity (int): Capacity of the resource.\n    location (List[float]): Location of the resource. Has to be a list of length 2.\n    controller (Literal[ControllerEnum.TransportController]): Controller of the resource, has to be a TransportController.\n    control_policy (TransportControlPolicy): Control policy of the resource.\n    process_ids (List[str]): Process IDs of the resource.\n    process_capacities (Optional[List[int]], optional): Process capacities of the resource. Defaults to None.\n    state_ids (Optional[List[str]], optional): State IDs of the resource. Defaults to [].\n\nExamples:\n    Creation of a transport resource with a capacity of 1, a location of [15.0, 15.0], a TransportController and a FIFO control policy:\n    ```py\n    import prodsys\n    prodsys.resource_data.TransportResourceData(\n        ID=\"TR1\",\n        description=\"Transport Resource 1\",\n        capacity=1,\n        location=[15.0, 15.0],\n        controller=prodsys.resource_data.ControllerEnum.TransportController,\n        control_policy=prodsys.resource_data.TransportControlPolicy.FIFO,\n        process_ids=[\"TP1\"],\n    )\n    ```",
        "example": {
          "summary": "Transport Resource Data",
          "value": {
            "ID": "TR1",
            "description": "Transport Resource 1",
            "capacity": 1,
            "location": [
              15,
              15
            ],
            "controller": "TransportController",
            "control_policy": "FIFO",
            "process_ids": [
              "TP1"
            ],
            "states": [
              "Breakdownstate_1"
            ]
          }
        }
      },
      "TransportStateData": {
        "title": "TransportStateData",
        "required": [
          "ID",
          "description",
          "time_model_id",
          "type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "title": "Id",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "time_model_id": {
            "title": "Time Model Id",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "enum": [
              "TransportState"
            ],
            "type": "string"
          }
        },
        "description": "Class that represents a transport state. By undergoing a transport state, the product is transported and its position is changed. Transport states don't have to be initialized because they are automatically created when a transport process is added to a resource.\n\nArgs:\n    ID (str): ID of the state.\n    description (str): Description of the state.\n    time_model_id (str): Time model ID of the state.\n    type (StateTypeEnum): Type of the state.",
        "example": {
          "summary": "Transport state",
          "value": {
            "ID": "TransportState_1",
            "description": "Transport state machine 1",
            "time_model_id": "function_time_model_3",
            "type": "TransportState"
          }
        }
      },
      "UnscheduledDowntime": {
        "title": "UnscheduledDowntime",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "unscheduled_downtime"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "Unscheduled downtime KPI",
          "value": {
            "name": "unscheduled_downtime",
            "target": "min",
            "weight": 1,
            "value": 0.1,
            "context": [
              "resource"
            ],
            "resource": "Resource_1"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "WIP": {
        "title": "WIP",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "enum": [
              "WIP"
            ],
            "type": "string"
          },
          "target": {
            "title": "Target",
            "enum": [
              "min"
            ],
            "type": "string",
            "default": "min"
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "default": 1
          },
          "value": {
            "title": "Value",
            "type": "number"
          },
          "context": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPILevelEnum"
            }
          },
          "resource": {
            "title": "Resource",
            "type": "string"
          },
          "product_type": {
            "title": "Product Type",
            "type": "string"
          }
        },
        "description": "Class that represents a KPI. Not intended for usage but only inheritance.\n\nArgs:\n    name (KPIEnum): Name of the KPI.\n    target (Literal[\"min\", \"max\"]): Favourable target of the KPI.\n    weight (Optional[float], optional): Weight of the KPI. Defaults to 1.\n    value (Optional[float], optional): Value of the KPI. Defaults to None.\n    context (Tuple[KPILevelEnum, ...], optional): Context of the KPI. Defaults to None.\n    resource (Optional[str], optional): Resource of the KPI. Defaults to None.\n    product_type (Optional[str], optional): Product type of the KPI. Defaults to None.    Returns:",
        "example": {
          "summary": "WIP KPI",
          "value": {
            "name": "WIP",
            "target": "min",
            "weight": 1,
            "value": 121,
            "context": [
              "system",
              "product_type"
            ],
            "product_type": "ProductType_1"
          }
        }
      }
    }
  }
}